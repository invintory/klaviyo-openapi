/* tslint:disable */
/* eslint-disable */
/**
 * Klaviyo API
 * The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.
 *
 * The version of the OpenAPI document: 2022-10-17
 * Contact: developers@klaviyo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ProfileLocationLatitude } from './ProfileLocationLatitude';
import {
    ProfileLocationLatitudeFromJSON,
    ProfileLocationLatitudeFromJSONTyped,
    ProfileLocationLatitudeToJSON,
} from './ProfileLocationLatitude';

/**
 * 
 * @export
 * @interface ProfileLocation
 */
export interface ProfileLocation {
    /**
     * 
     * @type {string}
     * @memberof ProfileLocation
     */
    address1?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileLocation
     */
    address2?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileLocation
     */
    city?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileLocation
     */
    country?: string;
    /**
     * 
     * @type {ProfileLocationLatitude}
     * @memberof ProfileLocation
     */
    latitude?: ProfileLocationLatitude;
    /**
     * 
     * @type {ProfileLocationLatitude}
     * @memberof ProfileLocation
     */
    longitude?: ProfileLocationLatitude;
    /**
     * 
     * @type {string}
     * @memberof ProfileLocation
     */
    region?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileLocation
     */
    zip?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileLocation
     */
    timezone?: string;
}

/**
 * Check if a given object implements the ProfileLocation interface.
 */
export function instanceOfProfileLocation(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ProfileLocationFromJSON(json: any): ProfileLocation {
    return ProfileLocationFromJSONTyped(json, false);
}

export function ProfileLocationFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProfileLocation {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'address1': !exists(json, 'address1') ? undefined : json['address1'],
        'address2': !exists(json, 'address2') ? undefined : json['address2'],
        'city': !exists(json, 'city') ? undefined : json['city'],
        'country': !exists(json, 'country') ? undefined : json['country'],
        'latitude': !exists(json, 'latitude') ? undefined : ProfileLocationLatitudeFromJSON(json['latitude']),
        'longitude': !exists(json, 'longitude') ? undefined : ProfileLocationLatitudeFromJSON(json['longitude']),
        'region': !exists(json, 'region') ? undefined : json['region'],
        'zip': !exists(json, 'zip') ? undefined : json['zip'],
        'timezone': !exists(json, 'timezone') ? undefined : json['timezone'],
    };
}

export function ProfileLocationToJSON(value?: ProfileLocation | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'address1': value.address1,
        'address2': value.address2,
        'city': value.city,
        'country': value.country,
        'latitude': ProfileLocationLatitudeToJSON(value.latitude),
        'longitude': ProfileLocationLatitudeToJSON(value.longitude),
        'region': value.region,
        'zip': value.zip,
        'timezone': value.timezone,
    };
}

