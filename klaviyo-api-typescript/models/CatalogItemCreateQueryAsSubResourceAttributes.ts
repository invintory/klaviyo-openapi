/* tslint:disable */
/* eslint-disable */
/**
 * Klaviyo API
 * The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.
 *
 * The version of the OpenAPI document: 2022-10-17
 * Contact: developers@klaviyo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CatalogItemCreateQueryAsSubResourceAttributes
 */
export interface CatalogItemCreateQueryAsSubResourceAttributes {
    /**
     * 
     * @type {string}
     * @memberof CatalogItemCreateQueryAsSubResourceAttributes
     */
    externalId: string;
    /**
     * The integration type. Currently, this can only be set to $custom (and defaults to $custom if not included in the payload).
     * @type {string}
     * @memberof CatalogItemCreateQueryAsSubResourceAttributes
     */
    integrationType?: CatalogItemCreateQueryAsSubResourceAttributesIntegrationTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof CatalogItemCreateQueryAsSubResourceAttributes
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogItemCreateQueryAsSubResourceAttributes
     */
    catalogType?: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogItemCreateQueryAsSubResourceAttributes
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogItemCreateQueryAsSubResourceAttributes
     */
    url: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogItemCreateQueryAsSubResourceAttributes
     */
    imageFullUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogItemCreateQueryAsSubResourceAttributes
     */
    imageThumbnailUrl?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CatalogItemCreateQueryAsSubResourceAttributes
     */
    images?: Array<string>;
    /**
     * 
     * @type {object}
     * @memberof CatalogItemCreateQueryAsSubResourceAttributes
     */
    customMetadata?: object;
    /**
     * 
     * @type {boolean}
     * @memberof CatalogItemCreateQueryAsSubResourceAttributes
     */
    published?: boolean;
}


/**
 * @export
 */
export const CatalogItemCreateQueryAsSubResourceAttributesIntegrationTypeEnum = {
    Custom: '$custom'
} as const;
export type CatalogItemCreateQueryAsSubResourceAttributesIntegrationTypeEnum = typeof CatalogItemCreateQueryAsSubResourceAttributesIntegrationTypeEnum[keyof typeof CatalogItemCreateQueryAsSubResourceAttributesIntegrationTypeEnum];


/**
 * Check if a given object implements the CatalogItemCreateQueryAsSubResourceAttributes interface.
 */
export function instanceOfCatalogItemCreateQueryAsSubResourceAttributes(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "externalId" in value;
    isInstance = isInstance && "title" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "url" in value;

    return isInstance;
}

export function CatalogItemCreateQueryAsSubResourceAttributesFromJSON(json: any): CatalogItemCreateQueryAsSubResourceAttributes {
    return CatalogItemCreateQueryAsSubResourceAttributesFromJSONTyped(json, false);
}

export function CatalogItemCreateQueryAsSubResourceAttributesFromJSONTyped(json: any, ignoreDiscriminator: boolean): CatalogItemCreateQueryAsSubResourceAttributes {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'externalId': json['external_id'],
        'integrationType': !exists(json, 'integration_type') ? undefined : json['integration_type'],
        'title': json['title'],
        'catalogType': !exists(json, 'catalog_type') ? undefined : json['catalog_type'],
        'description': json['description'],
        'url': json['url'],
        'imageFullUrl': !exists(json, 'image_full_url') ? undefined : json['image_full_url'],
        'imageThumbnailUrl': !exists(json, 'image_thumbnail_url') ? undefined : json['image_thumbnail_url'],
        'images': !exists(json, 'images') ? undefined : json['images'],
        'customMetadata': !exists(json, 'custom_metadata') ? undefined : json['custom_metadata'],
        'published': !exists(json, 'published') ? undefined : json['published'],
    };
}

export function CatalogItemCreateQueryAsSubResourceAttributesToJSON(value?: CatalogItemCreateQueryAsSubResourceAttributes | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'external_id': value.externalId,
        'integration_type': value.integrationType,
        'title': value.title,
        'catalog_type': value.catalogType,
        'description': value.description,
        'url': value.url,
        'image_full_url': value.imageFullUrl,
        'image_thumbnail_url': value.imageThumbnailUrl,
        'images': value.images,
        'custom_metadata': value.customMetadata,
        'published': value.published,
    };
}

