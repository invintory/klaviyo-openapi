/* tslint:disable */
/* eslint-disable */
/**
 * Klaviyo API
 * The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.
 *
 * The version of the OpenAPI document: 2022-10-17
 * Contact: developers@klaviyo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CatalogCategoryCreateQueryAsSubResourceAttributes
 */
export interface CatalogCategoryCreateQueryAsSubResourceAttributes {
    /**
     * 
     * @type {string}
     * @memberof CatalogCategoryCreateQueryAsSubResourceAttributes
     */
    externalId: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogCategoryCreateQueryAsSubResourceAttributes
     */
    name: string;
    /**
     * The integration type. Currently, this can only be set to $custom (and defaults to $custom if not included in the payload).
     * @type {string}
     * @memberof CatalogCategoryCreateQueryAsSubResourceAttributes
     */
    integrationType?: CatalogCategoryCreateQueryAsSubResourceAttributesIntegrationTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof CatalogCategoryCreateQueryAsSubResourceAttributes
     */
    catalogType?: string;
}


/**
 * @export
 */
export const CatalogCategoryCreateQueryAsSubResourceAttributesIntegrationTypeEnum = {
    Custom: '$custom'
} as const;
export type CatalogCategoryCreateQueryAsSubResourceAttributesIntegrationTypeEnum = typeof CatalogCategoryCreateQueryAsSubResourceAttributesIntegrationTypeEnum[keyof typeof CatalogCategoryCreateQueryAsSubResourceAttributesIntegrationTypeEnum];


/**
 * Check if a given object implements the CatalogCategoryCreateQueryAsSubResourceAttributes interface.
 */
export function instanceOfCatalogCategoryCreateQueryAsSubResourceAttributes(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "externalId" in value;
    isInstance = isInstance && "name" in value;

    return isInstance;
}

export function CatalogCategoryCreateQueryAsSubResourceAttributesFromJSON(json: any): CatalogCategoryCreateQueryAsSubResourceAttributes {
    return CatalogCategoryCreateQueryAsSubResourceAttributesFromJSONTyped(json, false);
}

export function CatalogCategoryCreateQueryAsSubResourceAttributesFromJSONTyped(json: any, ignoreDiscriminator: boolean): CatalogCategoryCreateQueryAsSubResourceAttributes {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'externalId': json['external_id'],
        'name': json['name'],
        'integrationType': !exists(json, 'integration_type') ? undefined : json['integration_type'],
        'catalogType': !exists(json, 'catalog_type') ? undefined : json['catalog_type'],
    };
}

export function CatalogCategoryCreateQueryAsSubResourceAttributesToJSON(value?: CatalogCategoryCreateQueryAsSubResourceAttributes | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'external_id': value.externalId,
        'name': value.name,
        'integration_type': value.integrationType,
        'catalog_type': value.catalogType,
    };
}

