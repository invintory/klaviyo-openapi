/* tslint:disable */
/* eslint-disable */
/**
 * Klaviyo API
 * The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.
 *
 * The version of the OpenAPI document: 2022-10-17
 * Contact: developers@klaviyo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface MetricAggregateQueryAsSubResourceAttributes
 */
export interface MetricAggregateQueryAsSubResourceAttributes {
    /**
     * 
     * @type {string}
     * @memberof MetricAggregateQueryAsSubResourceAttributes
     */
    metricId: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof MetricAggregateQueryAsSubResourceAttributes
     */
    measurements: Array<MetricAggregateQueryAsSubResourceAttributesMeasurementsEnum>;
    /**
     * Supported intervals for bucketing query results by time
     * @type {string}
     * @memberof MetricAggregateQueryAsSubResourceAttributes
     */
    interval: MetricAggregateQueryAsSubResourceAttributesIntervalEnum;
    /**
     * 
     * @type {number}
     * @memberof MetricAggregateQueryAsSubResourceAttributes
     */
    pageSize?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof MetricAggregateQueryAsSubResourceAttributes
     */
    by?: Array<MetricAggregateQueryAsSubResourceAttributesByEnum>;
    /**
     * 
     * @type {Array<string>}
     * @memberof MetricAggregateQueryAsSubResourceAttributes
     */
    returnFields?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof MetricAggregateQueryAsSubResourceAttributes
     */
    filter: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof MetricAggregateQueryAsSubResourceAttributes
     */
    timezone: string;
    /**
     * 
     * @type {string}
     * @memberof MetricAggregateQueryAsSubResourceAttributes
     */
    sort?: MetricAggregateQueryAsSubResourceAttributesSortEnum;
    /**
     * 
     * @type {string}
     * @memberof MetricAggregateQueryAsSubResourceAttributes
     */
    pageCursor?: string;
}


/**
 * @export
 */
export const MetricAggregateQueryAsSubResourceAttributesMeasurementsEnum = {
    Count: 'count',
    SumValue: 'sum_value',
    Unique: 'unique'
} as const;
export type MetricAggregateQueryAsSubResourceAttributesMeasurementsEnum = typeof MetricAggregateQueryAsSubResourceAttributesMeasurementsEnum[keyof typeof MetricAggregateQueryAsSubResourceAttributesMeasurementsEnum];

/**
 * @export
 */
export const MetricAggregateQueryAsSubResourceAttributesIntervalEnum = {
    Day: 'day',
    Hour: 'hour',
    Month: 'month',
    Week: 'week'
} as const;
export type MetricAggregateQueryAsSubResourceAttributesIntervalEnum = typeof MetricAggregateQueryAsSubResourceAttributesIntervalEnum[keyof typeof MetricAggregateQueryAsSubResourceAttributesIntervalEnum];

/**
 * @export
 */
export const MetricAggregateQueryAsSubResourceAttributesByEnum = {
    AttributedChannel: '$attributed_channel',
    AttributedFlow: '$attributed_flow',
    AttributedMessage: '$attributed_message',
    AttributedVariation: '$attributed_variation',
    CampaignChannel: '$campaign_channel',
    Flow: '$flow',
    FlowChannel: '$flow_channel',
    Message: '$message',
    MessageSendCohort: '$message_send_cohort',
    Variation: '$variation',
    VariationSendCohort: '$variation_send_cohort',
    BounceType: 'Bounce Type',
    CampaignName: 'Campaign Name',
    ClientCanonical: 'Client Canonical',
    ClientName: 'Client Name',
    ClientType: 'Client Type',
    EmailDomain: 'Email Domain',
    FailureSource: 'Failure Source',
    FailureType: 'Failure Type',
    FromNumber: 'From Number',
    FromPhoneRegion: 'From Phone Region',
    List: 'List',
    MessageName: 'Message Name',
    MessageType: 'Message Type',
    Method: 'Method',
    Subject: 'Subject',
    ToNumber: 'To Number',
    ToPhoneRegion: 'To Phone Region',
    Url: 'URL',
    FormId: 'form_id'
} as const;
export type MetricAggregateQueryAsSubResourceAttributesByEnum = typeof MetricAggregateQueryAsSubResourceAttributesByEnum[keyof typeof MetricAggregateQueryAsSubResourceAttributesByEnum];

/**
 * @export
 */
export const MetricAggregateQueryAsSubResourceAttributesSortEnum = {
    AttributedChannel: '$attributed_channel',
    AttributedChannel: '-$attributed_channel',
    AttributedFlow: '$attributed_flow',
    AttributedFlow: '-$attributed_flow',
    AttributedMessage: '$attributed_message',
    AttributedMessage: '-$attributed_message',
    AttributedVariation: '$attributed_variation',
    AttributedVariation: '-$attributed_variation',
    CampaignChannel: '$campaign_channel',
    CampaignChannel: '-$campaign_channel',
    Flow: '$flow',
    Flow: '-$flow',
    FlowChannel: '$flow_channel',
    FlowChannel: '-$flow_channel',
    Message: '$message',
    Message: '-$message',
    MessageSendCohort: '$message_send_cohort',
    MessageSendCohort: '-$message_send_cohort',
    Variation: '$variation',
    Variation: '-$variation',
    VariationSendCohort: '$variation_send_cohort',
    VariationSendCohort: '-$variation_send_cohort',
    BounceType: 'Bounce Type',
    BounceType: '-Bounce Type',
    CampaignName: 'Campaign Name',
    CampaignName: '-Campaign Name',
    ClientCanonical: 'Client Canonical',
    ClientCanonical: '-Client Canonical',
    ClientName: 'Client Name',
    ClientName: '-Client Name',
    ClientType: 'Client Type',
    ClientType: '-Client Type',
    EmailDomain: 'Email Domain',
    EmailDomain: '-Email Domain',
    FailureSource: 'Failure Source',
    FailureSource: '-Failure Source',
    FailureType: 'Failure Type',
    FailureType: '-Failure Type',
    FromNumber: 'From Number',
    FromNumber: '-From Number',
    FromPhoneRegion: 'From Phone Region',
    FromPhoneRegion: '-From Phone Region',
    List: 'List',
    List: '-List',
    MessageName: 'Message Name',
    MessageName: '-Message Name',
    MessageType: 'Message Type',
    MessageType: '-Message Type',
    Method: 'Method',
    Method: '-Method',
    Subject: 'Subject',
    Subject: '-Subject',
    ToNumber: 'To Number',
    ToNumber: '-To Number',
    ToPhoneRegion: 'To Phone Region',
    ToPhoneRegion: '-To Phone Region',
    Url: 'URL',
    Url: '-URL',
    Count: 'count',
    Count: '-count',
    FormId: 'form_id',
    FormId: '-form_id',
    SumValue: 'sum_value',
    SumValue: '-sum_value',
    Unique: 'unique',
    Unique: '-unique'
} as const;
export type MetricAggregateQueryAsSubResourceAttributesSortEnum = typeof MetricAggregateQueryAsSubResourceAttributesSortEnum[keyof typeof MetricAggregateQueryAsSubResourceAttributesSortEnum];


/**
 * Check if a given object implements the MetricAggregateQueryAsSubResourceAttributes interface.
 */
export function instanceOfMetricAggregateQueryAsSubResourceAttributes(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "metricId" in value;
    isInstance = isInstance && "measurements" in value;
    isInstance = isInstance && "interval" in value;
    isInstance = isInstance && "filter" in value;
    isInstance = isInstance && "timezone" in value;

    return isInstance;
}

export function MetricAggregateQueryAsSubResourceAttributesFromJSON(json: any): MetricAggregateQueryAsSubResourceAttributes {
    return MetricAggregateQueryAsSubResourceAttributesFromJSONTyped(json, false);
}

export function MetricAggregateQueryAsSubResourceAttributesFromJSONTyped(json: any, ignoreDiscriminator: boolean): MetricAggregateQueryAsSubResourceAttributes {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'metricId': json['metric_id'],
        'measurements': json['measurements'],
        'interval': json['interval'],
        'pageSize': !exists(json, 'page_size') ? undefined : json['page_size'],
        'by': !exists(json, 'by') ? undefined : json['by'],
        'returnFields': !exists(json, 'return_fields') ? undefined : json['return_fields'],
        'filter': json['filter'],
        'timezone': json['timezone'],
        'sort': !exists(json, 'sort') ? undefined : json['sort'],
        'pageCursor': !exists(json, 'page_cursor') ? undefined : json['page_cursor'],
    };
}

export function MetricAggregateQueryAsSubResourceAttributesToJSON(value?: MetricAggregateQueryAsSubResourceAttributes | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'metric_id': value.metricId,
        'measurements': value.measurements,
        'interval': value.interval,
        'page_size': value.pageSize,
        'by': value.by,
        'return_fields': value.returnFields,
        'filter': value.filter,
        'timezone': value.timezone,
        'sort': value.sort,
        'page_cursor': value.pageCursor,
    };
}

