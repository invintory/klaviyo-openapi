/* tslint:disable */
/* eslint-disable */
/**
 * Klaviyo API
 * The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.
 *
 * The version of the OpenAPI document: 2022-10-17
 * Contact: developers@klaviyo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetCatalogItems4XXResponse,
  GetListResponseCollection,
  GetProfileResponseCollectionWithIncludedSection,
  GetProfileResponseWithIncludedSection,
  GetProfileSegmentRelationshipsResponseCollection,
  GetSegmentResponseCollection,
  PatchProfileResponse,
  PostProfileResponse,
  ProfileCreateQuery,
  ProfilePartialUpdateQuery,
  SubscriptionCreateJobCreateQuery,
  SuppressionCreateJobCreateQuery,
  UnsubscriptionCreateJobCreateQuery,
  UnsuppressionCreateJobCreateQuery,
} from '../models';
import {
    GetCatalogItems4XXResponseFromJSON,
    GetCatalogItems4XXResponseToJSON,
    GetListResponseCollectionFromJSON,
    GetListResponseCollectionToJSON,
    GetProfileResponseCollectionWithIncludedSectionFromJSON,
    GetProfileResponseCollectionWithIncludedSectionToJSON,
    GetProfileResponseWithIncludedSectionFromJSON,
    GetProfileResponseWithIncludedSectionToJSON,
    GetProfileSegmentRelationshipsResponseCollectionFromJSON,
    GetProfileSegmentRelationshipsResponseCollectionToJSON,
    GetSegmentResponseCollectionFromJSON,
    GetSegmentResponseCollectionToJSON,
    PatchProfileResponseFromJSON,
    PatchProfileResponseToJSON,
    PostProfileResponseFromJSON,
    PostProfileResponseToJSON,
    ProfileCreateQueryFromJSON,
    ProfileCreateQueryToJSON,
    ProfilePartialUpdateQueryFromJSON,
    ProfilePartialUpdateQueryToJSON,
    SubscriptionCreateJobCreateQueryFromJSON,
    SubscriptionCreateJobCreateQueryToJSON,
    SuppressionCreateJobCreateQueryFromJSON,
    SuppressionCreateJobCreateQueryToJSON,
    UnsubscriptionCreateJobCreateQueryFromJSON,
    UnsubscriptionCreateJobCreateQueryToJSON,
    UnsuppressionCreateJobCreateQueryFromJSON,
    UnsuppressionCreateJobCreateQueryToJSON,
} from '../models';

export interface CreateProfileRequest {
    revision: string;
    profileCreateQuery: ProfileCreateQuery;
}

export interface GetProfileRequest {
    id: string;
    revision: string;
    fieldsList?: Array<GetProfileFieldsListEnum>;
    fieldsProfile?: Array<GetProfileFieldsProfileEnum>;
    fieldsSegment?: Array<GetProfileFieldsSegmentEnum>;
    include?: Array<GetProfileIncludeEnum>;
}

export interface GetProfileListsRequest {
    profileId: string;
    revision: string;
    fieldsList?: Array<GetProfileListsFieldsListEnum>;
}

export interface GetProfileRelationshipsRequest {
    id: string;
    relatedResource: GetProfileRelationshipsRelatedResourceEnum;
    revision: string;
}

export interface GetProfileSegmentsRequest {
    profileId: string;
    revision: string;
    fieldsSegment?: Array<GetProfileSegmentsFieldsSegmentEnum>;
}

export interface GetProfilesRequest {
    revision: string;
    fieldsProfile?: Array<GetProfilesFieldsProfileEnum>;
    filter?: string;
    pageCursor?: string;
    sort?: GetProfilesSortEnum;
}

export interface SubscribeProfilesRequest {
    revision: string;
    subscriptionCreateJobCreateQuery: SubscriptionCreateJobCreateQuery;
}

export interface SuppressProfilesRequest {
    revision: string;
    suppressionCreateJobCreateQuery: SuppressionCreateJobCreateQuery;
}

export interface UnsubscribeProfilesRequest {
    revision: string;
    unsubscriptionCreateJobCreateQuery: UnsubscriptionCreateJobCreateQuery;
}

export interface UnsuppressProfilesRequest {
    revision: string;
    unsuppressionCreateJobCreateQuery: UnsuppressionCreateJobCreateQuery;
}

export interface UpdateProfileRequest {
    id: string;
    revision: string;
    profilePartialUpdateQuery: ProfilePartialUpdateQuery;
}

/**
 * 
 */
export class ProfilesApi extends runtime.BaseAPI {

    /**
     * Create a new profile.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `Profiles Write`
     * Create Profile
     */
    async createProfileRaw(requestParameters: CreateProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostProfileResponse>> {
        if (requestParameters.revision === null || requestParameters.revision === undefined) {
            throw new runtime.RequiredError('revision','Required parameter requestParameters.revision was null or undefined when calling createProfile.');
        }

        if (requestParameters.profileCreateQuery === null || requestParameters.profileCreateQuery === undefined) {
            throw new runtime.RequiredError('profileCreateQuery','Required parameter requestParameters.profileCreateQuery was null or undefined when calling createProfile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.revision !== undefined && requestParameters.revision !== null) {
            headerParameters['revision'] = String(requestParameters.revision);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Klaviyo-API-Key authentication
        }

        const response = await this.request({
            path: `/api/profiles/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProfileCreateQueryToJSON(requestParameters.profileCreateQuery),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostProfileResponseFromJSON(jsonValue));
    }

    /**
     * Create a new profile.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `Profiles Write`
     * Create Profile
     */
    async createProfile(requestParameters: CreateProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostProfileResponse> {
        const response = await this.createProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the profile with the given profile ID. Request specific fields using [sparse fieldsets](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#sparse-fieldsets). Include parameters can be provided to get the following related resource data: `lists` memberships, `segments` memberships\"<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `Profiles Read`
     * Get Profile
     */
    async getProfileRaw(requestParameters: GetProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetProfileResponseWithIncludedSection>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getProfile.');
        }

        if (requestParameters.revision === null || requestParameters.revision === undefined) {
            throw new runtime.RequiredError('revision','Required parameter requestParameters.revision was null or undefined when calling getProfile.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsList) {
            queryParameters['fields[list]'] = requestParameters.fieldsList.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsProfile) {
            queryParameters['fields[profile]'] = requestParameters.fieldsProfile.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsSegment) {
            queryParameters['fields[segment]'] = requestParameters.fieldsSegment.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.revision !== undefined && requestParameters.revision !== null) {
            headerParameters['revision'] = String(requestParameters.revision);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Klaviyo-API-Key authentication
        }

        const response = await this.request({
            path: `/api/profiles/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetProfileResponseWithIncludedSectionFromJSON(jsonValue));
    }

    /**
     * Get the profile with the given profile ID. Request specific fields using [sparse fieldsets](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#sparse-fieldsets). Include parameters can be provided to get the following related resource data: `lists` memberships, `segments` memberships\"<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `Profiles Read`
     * Get Profile
     */
    async getProfile(requestParameters: GetProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetProfileResponseWithIncludedSection> {
        const response = await this.getProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get list memberships for a profile with the given profile ID.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`  **Scopes:** `List Read` `Profiles Read`
     * Get Profile Lists
     */
    async getProfileListsRaw(requestParameters: GetProfileListsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetListResponseCollection>> {
        if (requestParameters.profileId === null || requestParameters.profileId === undefined) {
            throw new runtime.RequiredError('profileId','Required parameter requestParameters.profileId was null or undefined when calling getProfileLists.');
        }

        if (requestParameters.revision === null || requestParameters.revision === undefined) {
            throw new runtime.RequiredError('revision','Required parameter requestParameters.revision was null or undefined when calling getProfileLists.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsList) {
            queryParameters['fields[list]'] = requestParameters.fieldsList.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.revision !== undefined && requestParameters.revision !== null) {
            headerParameters['revision'] = String(requestParameters.revision);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Klaviyo-API-Key authentication
        }

        const response = await this.request({
            path: `/api/profiles/{profile_id}/lists/`.replace(`{${"profile_id"}}`, encodeURIComponent(String(requestParameters.profileId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetListResponseCollectionFromJSON(jsonValue));
    }

    /**
     * Get list memberships for a profile with the given profile ID.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`  **Scopes:** `List Read` `Profiles Read`
     * Get Profile Lists
     */
    async getProfileLists(requestParameters: GetProfileListsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetListResponseCollection> {
        const response = await this.getProfileListsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get list membership or segment membership relationships for a profile with the given profile ID.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`  **Scopes:** `Lists Read` `Profiles Read` `Segments Read`
     * Get Profile Relationships
     */
    async getProfileRelationshipsRaw(requestParameters: GetProfileRelationshipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetProfileSegmentRelationshipsResponseCollection>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getProfileRelationships.');
        }

        if (requestParameters.relatedResource === null || requestParameters.relatedResource === undefined) {
            throw new runtime.RequiredError('relatedResource','Required parameter requestParameters.relatedResource was null or undefined when calling getProfileRelationships.');
        }

        if (requestParameters.revision === null || requestParameters.revision === undefined) {
            throw new runtime.RequiredError('revision','Required parameter requestParameters.revision was null or undefined when calling getProfileRelationships.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.revision !== undefined && requestParameters.revision !== null) {
            headerParameters['revision'] = String(requestParameters.revision);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Klaviyo-API-Key authentication
        }

        const response = await this.request({
            path: `/api/profiles/{id}/relationships/{related_resource}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"related_resource"}}`, encodeURIComponent(String(requestParameters.relatedResource))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetProfileSegmentRelationshipsResponseCollectionFromJSON(jsonValue));
    }

    /**
     * Get list membership or segment membership relationships for a profile with the given profile ID.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`  **Scopes:** `Lists Read` `Profiles Read` `Segments Read`
     * Get Profile Relationships
     */
    async getProfileRelationships(requestParameters: GetProfileRelationshipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetProfileSegmentRelationshipsResponseCollection> {
        const response = await this.getProfileRelationshipsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get segment memberships for a profile with the given profile ID.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`  **Scopes:** `Profiles Read` `Segments Read`
     * Get Profile Segments
     */
    async getProfileSegmentsRaw(requestParameters: GetProfileSegmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetSegmentResponseCollection>> {
        if (requestParameters.profileId === null || requestParameters.profileId === undefined) {
            throw new runtime.RequiredError('profileId','Required parameter requestParameters.profileId was null or undefined when calling getProfileSegments.');
        }

        if (requestParameters.revision === null || requestParameters.revision === undefined) {
            throw new runtime.RequiredError('revision','Required parameter requestParameters.revision was null or undefined when calling getProfileSegments.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsSegment) {
            queryParameters['fields[segment]'] = requestParameters.fieldsSegment.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.revision !== undefined && requestParameters.revision !== null) {
            headerParameters['revision'] = String(requestParameters.revision);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Klaviyo-API-Key authentication
        }

        const response = await this.request({
            path: `/api/profiles/{profile_id}/segments/`.replace(`{${"profile_id"}}`, encodeURIComponent(String(requestParameters.profileId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetSegmentResponseCollectionFromJSON(jsonValue));
    }

    /**
     * Get segment memberships for a profile with the given profile ID.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`  **Scopes:** `Profiles Read` `Segments Read`
     * Get Profile Segments
     */
    async getProfileSegments(requestParameters: GetProfileSegmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetSegmentResponseCollection> {
        const response = await this.getProfileSegmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all profiles in an account. Profiles can be sorted by the following fields in ascending and descending order: `id`, `created`, `email` Use filters to narrow your results. Request specific fields using [sparse fieldsets](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#sparse-fieldsets). Returns a maximum of 20 profiles per page, which can be paginated with [cursor-based pagination](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#pagination).<br><br>*Rate limits*:<br>Burst: `10/s`<br>Steady: `150/m`  **Scopes:** `Profiles Write`
     * Get Profiles
     */
    async getProfilesRaw(requestParameters: GetProfilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetProfileResponseCollectionWithIncludedSection>> {
        if (requestParameters.revision === null || requestParameters.revision === undefined) {
            throw new runtime.RequiredError('revision','Required parameter requestParameters.revision was null or undefined when calling getProfiles.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsProfile) {
            queryParameters['fields[profile]'] = requestParameters.fieldsProfile.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.pageCursor !== undefined) {
            queryParameters['page[cursor]'] = requestParameters.pageCursor;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.revision !== undefined && requestParameters.revision !== null) {
            headerParameters['revision'] = String(requestParameters.revision);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Klaviyo-API-Key authentication
        }

        const response = await this.request({
            path: `/api/profiles/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetProfileResponseCollectionWithIncludedSectionFromJSON(jsonValue));
    }

    /**
     * Get all profiles in an account. Profiles can be sorted by the following fields in ascending and descending order: `id`, `created`, `email` Use filters to narrow your results. Request specific fields using [sparse fieldsets](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#sparse-fieldsets). Returns a maximum of 20 profiles per page, which can be paginated with [cursor-based pagination](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#pagination).<br><br>*Rate limits*:<br>Burst: `10/s`<br>Steady: `150/m`  **Scopes:** `Profiles Write`
     * Get Profiles
     */
    async getProfiles(requestParameters: GetProfilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetProfileResponseCollectionWithIncludedSection> {
        const response = await this.getProfilesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Subscribe one or more profiles to email marketing, SMS marketing, or both. If the list has double opt-in enabled, profiles will receive a message requiring their confirmation before subscribing. Otherwise, profiles will be immediately subscribed without receiving a confirmation message. To add someone to a list without changing their subscription status, use [Add Profile to List](https://developers.klaviyo.com/en/v2022-10-17/reference/create_list_relationships). Maximum number of profile can be submitted for subscription: 100<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `List Write` `Profiles Write` `Subscriptions Write`
     * Subscribe Profiles
     */
    async subscribeProfilesRaw(requestParameters: SubscribeProfilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.revision === null || requestParameters.revision === undefined) {
            throw new runtime.RequiredError('revision','Required parameter requestParameters.revision was null or undefined when calling subscribeProfiles.');
        }

        if (requestParameters.subscriptionCreateJobCreateQuery === null || requestParameters.subscriptionCreateJobCreateQuery === undefined) {
            throw new runtime.RequiredError('subscriptionCreateJobCreateQuery','Required parameter requestParameters.subscriptionCreateJobCreateQuery was null or undefined when calling subscribeProfiles.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.revision !== undefined && requestParameters.revision !== null) {
            headerParameters['revision'] = String(requestParameters.revision);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Klaviyo-API-Key authentication
        }

        const response = await this.request({
            path: `/api/profile-subscription-bulk-create-jobs/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SubscriptionCreateJobCreateQueryToJSON(requestParameters.subscriptionCreateJobCreateQuery),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Subscribe one or more profiles to email marketing, SMS marketing, or both. If the list has double opt-in enabled, profiles will receive a message requiring their confirmation before subscribing. Otherwise, profiles will be immediately subscribed without receiving a confirmation message. To add someone to a list without changing their subscription status, use [Add Profile to List](https://developers.klaviyo.com/en/v2022-10-17/reference/create_list_relationships). Maximum number of profile can be submitted for subscription: 100<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `List Write` `Profiles Write` `Subscriptions Write`
     * Subscribe Profiles
     */
    async subscribeProfiles(requestParameters: SubscribeProfilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.subscribeProfilesRaw(requestParameters, initOverrides);
    }

    /**
     * Manually suppress one or more profiles. Manually suppressed profiles will not receive email marketing. Not supported for SMS marketing. Maximum number of profile can be submitted for suppression: 100<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `Profiles Write` `Subscriptions Write`
     * Suppress Profiles
     */
    async suppressProfilesRaw(requestParameters: SuppressProfilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.revision === null || requestParameters.revision === undefined) {
            throw new runtime.RequiredError('revision','Required parameter requestParameters.revision was null or undefined when calling suppressProfiles.');
        }

        if (requestParameters.suppressionCreateJobCreateQuery === null || requestParameters.suppressionCreateJobCreateQuery === undefined) {
            throw new runtime.RequiredError('suppressionCreateJobCreateQuery','Required parameter requestParameters.suppressionCreateJobCreateQuery was null or undefined when calling suppressProfiles.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.revision !== undefined && requestParameters.revision !== null) {
            headerParameters['revision'] = String(requestParameters.revision);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Klaviyo-API-Key authentication
        }

        const response = await this.request({
            path: `/api/profile-suppression-bulk-create-jobs/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SuppressionCreateJobCreateQueryToJSON(requestParameters.suppressionCreateJobCreateQuery),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manually suppress one or more profiles. Manually suppressed profiles will not receive email marketing. Not supported for SMS marketing. Maximum number of profile can be submitted for suppression: 100<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `Profiles Write` `Subscriptions Write`
     * Suppress Profiles
     */
    async suppressProfiles(requestParameters: SuppressProfilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.suppressProfilesRaw(requestParameters, initOverrides);
    }

    /**
     * Unsubscribe one or more profiles to email marketing, SMS marketing, or both. To remove someone from a list without changing their subscription status, use [Remove Profile from List](https://developers.klaviyo.com/en/v2022-10-17/reference/delete_list_relationships). Maximum number of profile can be submitted for unsubscription: 100<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `List Write` `Profiles Write` `Subscriptions Write`
     * Unsubscribe Profiles
     */
    async unsubscribeProfilesRaw(requestParameters: UnsubscribeProfilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.revision === null || requestParameters.revision === undefined) {
            throw new runtime.RequiredError('revision','Required parameter requestParameters.revision was null or undefined when calling unsubscribeProfiles.');
        }

        if (requestParameters.unsubscriptionCreateJobCreateQuery === null || requestParameters.unsubscriptionCreateJobCreateQuery === undefined) {
            throw new runtime.RequiredError('unsubscriptionCreateJobCreateQuery','Required parameter requestParameters.unsubscriptionCreateJobCreateQuery was null or undefined when calling unsubscribeProfiles.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.revision !== undefined && requestParameters.revision !== null) {
            headerParameters['revision'] = String(requestParameters.revision);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Klaviyo-API-Key authentication
        }

        const response = await this.request({
            path: `/api/profile-unsubscription-bulk-create-jobs/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UnsubscriptionCreateJobCreateQueryToJSON(requestParameters.unsubscriptionCreateJobCreateQuery),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Unsubscribe one or more profiles to email marketing, SMS marketing, or both. To remove someone from a list without changing their subscription status, use [Remove Profile from List](https://developers.klaviyo.com/en/v2022-10-17/reference/delete_list_relationships). Maximum number of profile can be submitted for unsubscription: 100<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `List Write` `Profiles Write` `Subscriptions Write`
     * Unsubscribe Profiles
     */
    async unsubscribeProfiles(requestParameters: UnsubscribeProfilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.unsubscribeProfilesRaw(requestParameters, initOverrides);
    }

    /**
     * Unsuppress one or more profiles. Unsuppressed profiles will receive email marketing. Not supported for SMS marketing. Profiles suppressed due to a hard bounced email will not be unsuppressed. Maximum number of profile can be submitted for unsuppression: 100<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `Subscriptions Write`
     * Unsuppress Profiles
     */
    async unsuppressProfilesRaw(requestParameters: UnsuppressProfilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.revision === null || requestParameters.revision === undefined) {
            throw new runtime.RequiredError('revision','Required parameter requestParameters.revision was null or undefined when calling unsuppressProfiles.');
        }

        if (requestParameters.unsuppressionCreateJobCreateQuery === null || requestParameters.unsuppressionCreateJobCreateQuery === undefined) {
            throw new runtime.RequiredError('unsuppressionCreateJobCreateQuery','Required parameter requestParameters.unsuppressionCreateJobCreateQuery was null or undefined when calling unsuppressProfiles.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.revision !== undefined && requestParameters.revision !== null) {
            headerParameters['revision'] = String(requestParameters.revision);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Klaviyo-API-Key authentication
        }

        const response = await this.request({
            path: `/api/profile-unsuppression-bulk-create-jobs/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UnsuppressionCreateJobCreateQueryToJSON(requestParameters.unsuppressionCreateJobCreateQuery),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Unsuppress one or more profiles. Unsuppressed profiles will receive email marketing. Not supported for SMS marketing. Profiles suppressed due to a hard bounced email will not be unsuppressed. Maximum number of profile can be submitted for unsuppression: 100<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `Subscriptions Write`
     * Unsuppress Profiles
     */
    async unsuppressProfiles(requestParameters: UnsuppressProfilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.unsuppressProfilesRaw(requestParameters, initOverrides);
    }

    /**
     * Update the profile with the given profile ID.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `Profiles Write`
     * Update Profile
     */
    async updateProfileRaw(requestParameters: UpdateProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PatchProfileResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateProfile.');
        }

        if (requestParameters.revision === null || requestParameters.revision === undefined) {
            throw new runtime.RequiredError('revision','Required parameter requestParameters.revision was null or undefined when calling updateProfile.');
        }

        if (requestParameters.profilePartialUpdateQuery === null || requestParameters.profilePartialUpdateQuery === undefined) {
            throw new runtime.RequiredError('profilePartialUpdateQuery','Required parameter requestParameters.profilePartialUpdateQuery was null or undefined when calling updateProfile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.revision !== undefined && requestParameters.revision !== null) {
            headerParameters['revision'] = String(requestParameters.revision);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Klaviyo-API-Key authentication
        }

        const response = await this.request({
            path: `/api/profiles/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ProfilePartialUpdateQueryToJSON(requestParameters.profilePartialUpdateQuery),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PatchProfileResponseFromJSON(jsonValue));
    }

    /**
     * Update the profile with the given profile ID.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `Profiles Write`
     * Update Profile
     */
    async updateProfile(requestParameters: UpdateProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PatchProfileResponse> {
        const response = await this.updateProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetProfileFieldsListEnum = {
    Name: 'name',
    Created: 'created',
    Updated: 'updated'
} as const;
export type GetProfileFieldsListEnum = typeof GetProfileFieldsListEnum[keyof typeof GetProfileFieldsListEnum];
/**
 * @export
 */
export const GetProfileFieldsProfileEnum = {
    Email: 'email',
    PhoneNumber: 'phone_number',
    ExternalId: 'external_id',
    AnonymousId: 'anonymous_id',
    FirstName: 'first_name',
    LastName: 'last_name',
    Organization: 'organization',
    Title: 'title',
    Image: 'image',
    Created: 'created',
    Updated: 'updated',
    LastEventDate: 'last_event_date',
    Location: 'location',
    LocationAddress1: 'location.address1',
    LocationAddress2: 'location.address2',
    LocationCity: 'location.city',
    LocationCountry: 'location.country',
    LocationLatitude: 'location.latitude',
    LocationLongitude: 'location.longitude',
    LocationRegion: 'location.region',
    LocationZip: 'location.zip',
    LocationTimezone: 'location.timezone',
    Properties: 'properties'
} as const;
export type GetProfileFieldsProfileEnum = typeof GetProfileFieldsProfileEnum[keyof typeof GetProfileFieldsProfileEnum];
/**
 * @export
 */
export const GetProfileFieldsSegmentEnum = {
    Name: 'name',
    Created: 'created',
    Updated: 'updated'
} as const;
export type GetProfileFieldsSegmentEnum = typeof GetProfileFieldsSegmentEnum[keyof typeof GetProfileFieldsSegmentEnum];
/**
 * @export
 */
export const GetProfileIncludeEnum = {
    Lists: 'lists',
    Segments: 'segments'
} as const;
export type GetProfileIncludeEnum = typeof GetProfileIncludeEnum[keyof typeof GetProfileIncludeEnum];
/**
 * @export
 */
export const GetProfileListsFieldsListEnum = {
    Name: 'name',
    Created: 'created',
    Updated: 'updated'
} as const;
export type GetProfileListsFieldsListEnum = typeof GetProfileListsFieldsListEnum[keyof typeof GetProfileListsFieldsListEnum];
/**
 * @export
 */
export const GetProfileRelationshipsRelatedResourceEnum = {
    Lists: 'lists',
    Segments: 'segments'
} as const;
export type GetProfileRelationshipsRelatedResourceEnum = typeof GetProfileRelationshipsRelatedResourceEnum[keyof typeof GetProfileRelationshipsRelatedResourceEnum];
/**
 * @export
 */
export const GetProfileSegmentsFieldsSegmentEnum = {
    Name: 'name',
    Created: 'created',
    Updated: 'updated'
} as const;
export type GetProfileSegmentsFieldsSegmentEnum = typeof GetProfileSegmentsFieldsSegmentEnum[keyof typeof GetProfileSegmentsFieldsSegmentEnum];
/**
 * @export
 */
export const GetProfilesFieldsProfileEnum = {
    Email: 'email',
    PhoneNumber: 'phone_number',
    ExternalId: 'external_id',
    AnonymousId: 'anonymous_id',
    FirstName: 'first_name',
    LastName: 'last_name',
    Organization: 'organization',
    Title: 'title',
    Image: 'image',
    Created: 'created',
    Updated: 'updated',
    LastEventDate: 'last_event_date',
    Location: 'location',
    LocationAddress1: 'location.address1',
    LocationAddress2: 'location.address2',
    LocationCity: 'location.city',
    LocationCountry: 'location.country',
    LocationLatitude: 'location.latitude',
    LocationLongitude: 'location.longitude',
    LocationRegion: 'location.region',
    LocationZip: 'location.zip',
    LocationTimezone: 'location.timezone',
    Properties: 'properties'
} as const;
export type GetProfilesFieldsProfileEnum = typeof GetProfilesFieldsProfileEnum[keyof typeof GetProfilesFieldsProfileEnum];
/**
 * @export
 */
export const GetProfilesSortEnum = {
    Created: 'created',
    Created: '-created',
    Email: 'email',
    Email: '-email',
    Id: 'id',
    Id: '-id'
} as const;
export type GetProfilesSortEnum = typeof GetProfilesSortEnum[keyof typeof GetProfilesSortEnum];
