/* tslint:disable */
/* eslint-disable */
/**
 * Klaviyo API
 * The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.
 *
 * The version of the OpenAPI document: 2022-10-17
 * Contact: developers@klaviyo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  EventCreateQuery,
  GetCatalogItems4XXResponse,
  GetEventProfilesRelationshipListResponseCollection,
  GetEventResponseCollectionWithIncludedSection,
  GetEventResponseWithIncludedSection,
  GetMetricResponseCollection,
  GetProfileResponseCollection,
} from '../models';
import {
    EventCreateQueryFromJSON,
    EventCreateQueryToJSON,
    GetCatalogItems4XXResponseFromJSON,
    GetCatalogItems4XXResponseToJSON,
    GetEventProfilesRelationshipListResponseCollectionFromJSON,
    GetEventProfilesRelationshipListResponseCollectionToJSON,
    GetEventResponseCollectionWithIncludedSectionFromJSON,
    GetEventResponseCollectionWithIncludedSectionToJSON,
    GetEventResponseWithIncludedSectionFromJSON,
    GetEventResponseWithIncludedSectionToJSON,
    GetMetricResponseCollectionFromJSON,
    GetMetricResponseCollectionToJSON,
    GetProfileResponseCollectionFromJSON,
    GetProfileResponseCollectionToJSON,
} from '../models';

export interface CreateEventRequest {
    revision: string;
    eventCreateQuery: EventCreateQuery;
}

export interface GetEventRequest {
    id: string;
    revision: string;
    fieldsEvent?: Array<GetEventFieldsEventEnum>;
    fieldsMetric?: Array<GetEventFieldsMetricEnum>;
    fieldsProfile?: Array<GetEventFieldsProfileEnum>;
    include?: Array<GetEventIncludeEnum>;
}

export interface GetEventMetricsRequest {
    id: string;
    revision: string;
    fieldsMetric?: Array<GetEventMetricsFieldsMetricEnum>;
}

export interface GetEventProfilesRequest {
    id: string;
    revision: string;
    fieldsProfile?: Array<GetEventProfilesFieldsProfileEnum>;
}

export interface GetEventRelationshipsRequest {
    id: string;
    relatedResource: GetEventRelationshipsRelatedResourceEnum;
    revision: string;
}

export interface GetEventsRequest {
    revision: string;
    fieldsEvent?: Array<GetEventsFieldsEventEnum>;
    fieldsMetric?: Array<GetEventsFieldsMetricEnum>;
    fieldsProfile?: Array<GetEventsFieldsProfileEnum>;
    filter?: string;
    include?: Array<GetEventsIncludeEnum>;
    pageCursor?: string;
    sort?: GetEventsSortEnum;
}

/**
 * 
 */
export class EventsApi extends runtime.BaseAPI {

    /**
     * Create an event. Events are created asynchronously. Successful response indicates that the event was validated and submitted for processing, but does not guarantee that processing is complete.<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `Events Write`
     * Create Event
     */
    async createEventRaw(requestParameters: CreateEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.revision === null || requestParameters.revision === undefined) {
            throw new runtime.RequiredError('revision','Required parameter requestParameters.revision was null or undefined when calling createEvent.');
        }

        if (requestParameters.eventCreateQuery === null || requestParameters.eventCreateQuery === undefined) {
            throw new runtime.RequiredError('eventCreateQuery','Required parameter requestParameters.eventCreateQuery was null or undefined when calling createEvent.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.revision !== undefined && requestParameters.revision !== null) {
            headerParameters['revision'] = String(requestParameters.revision);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Klaviyo-API-Key authentication
        }

        const response = await this.request({
            path: `/api/events/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EventCreateQueryToJSON(requestParameters.eventCreateQuery),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create an event. Events are created asynchronously. Successful response indicates that the event was validated and submitted for processing, but does not guarantee that processing is complete.<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `Events Write`
     * Create Event
     */
    async createEvent(requestParameters: CreateEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createEventRaw(requestParameters, initOverrides);
    }

    /**
     * Get an event with the given event ID. Request specific fields using [sparse fieldsets](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#sparse-fieldsets). Include parameters can be provided to get the following related resource data: `metrics`, `profiles`<br><br>*Rate limits*:<br>Burst: `10/s`<br>Steady: `150/m`  **Scopes:** `Events Read`
     * Get Event
     */
    async getEventRaw(requestParameters: GetEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetEventResponseWithIncludedSection>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getEvent.');
        }

        if (requestParameters.revision === null || requestParameters.revision === undefined) {
            throw new runtime.RequiredError('revision','Required parameter requestParameters.revision was null or undefined when calling getEvent.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsEvent) {
            queryParameters['fields[event]'] = requestParameters.fieldsEvent.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsMetric) {
            queryParameters['fields[metric]'] = requestParameters.fieldsMetric.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsProfile) {
            queryParameters['fields[profile]'] = requestParameters.fieldsProfile.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.revision !== undefined && requestParameters.revision !== null) {
            headerParameters['revision'] = String(requestParameters.revision);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Klaviyo-API-Key authentication
        }

        const response = await this.request({
            path: `/api/events/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetEventResponseWithIncludedSectionFromJSON(jsonValue));
    }

    /**
     * Get an event with the given event ID. Request specific fields using [sparse fieldsets](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#sparse-fieldsets). Include parameters can be provided to get the following related resource data: `metrics`, `profiles`<br><br>*Rate limits*:<br>Burst: `10/s`<br>Steady: `150/m`  **Scopes:** `Events Read`
     * Get Event
     */
    async getEvent(requestParameters: GetEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetEventResponseWithIncludedSection> {
        const response = await this.getEventRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the metric for an event with the given event ID.<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `Events Read` `Metrics Read`
     * Get Event Metrics
     */
    async getEventMetricsRaw(requestParameters: GetEventMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetMetricResponseCollection>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getEventMetrics.');
        }

        if (requestParameters.revision === null || requestParameters.revision === undefined) {
            throw new runtime.RequiredError('revision','Required parameter requestParameters.revision was null or undefined when calling getEventMetrics.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsMetric) {
            queryParameters['fields[metric]'] = requestParameters.fieldsMetric.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.revision !== undefined && requestParameters.revision !== null) {
            headerParameters['revision'] = String(requestParameters.revision);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Klaviyo-API-Key authentication
        }

        const response = await this.request({
            path: `/api/events/{id}/metrics/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetMetricResponseCollectionFromJSON(jsonValue));
    }

    /**
     * Get the metric for an event with the given event ID.<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `Events Read` `Metrics Read`
     * Get Event Metrics
     */
    async getEventMetrics(requestParameters: GetEventMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetMetricResponseCollection> {
        const response = await this.getEventMetricsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the profile associated with an event with the given event ID.<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `Events Read` `Profiles Read`
     * Get Event Profiles
     */
    async getEventProfilesRaw(requestParameters: GetEventProfilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetProfileResponseCollection>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getEventProfiles.');
        }

        if (requestParameters.revision === null || requestParameters.revision === undefined) {
            throw new runtime.RequiredError('revision','Required parameter requestParameters.revision was null or undefined when calling getEventProfiles.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsProfile) {
            queryParameters['fields[profile]'] = requestParameters.fieldsProfile.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.revision !== undefined && requestParameters.revision !== null) {
            headerParameters['revision'] = String(requestParameters.revision);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Klaviyo-API-Key authentication
        }

        const response = await this.request({
            path: `/api/events/{id}/profiles/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetProfileResponseCollectionFromJSON(jsonValue));
    }

    /**
     * Get the profile associated with an event with the given event ID.<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `Events Read` `Profiles Read`
     * Get Event Profiles
     */
    async getEventProfiles(requestParameters: GetEventProfilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetProfileResponseCollection> {
        const response = await this.getEventProfilesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get metrics or profile [relationships](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#relationships) for an event with the given event ID.<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `Events Read` `Metrics Read` `Profiles Read`
     * Get Event Relationships
     */
    async getEventRelationshipsRaw(requestParameters: GetEventRelationshipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetEventProfilesRelationshipListResponseCollection>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getEventRelationships.');
        }

        if (requestParameters.relatedResource === null || requestParameters.relatedResource === undefined) {
            throw new runtime.RequiredError('relatedResource','Required parameter requestParameters.relatedResource was null or undefined when calling getEventRelationships.');
        }

        if (requestParameters.revision === null || requestParameters.revision === undefined) {
            throw new runtime.RequiredError('revision','Required parameter requestParameters.revision was null or undefined when calling getEventRelationships.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.revision !== undefined && requestParameters.revision !== null) {
            headerParameters['revision'] = String(requestParameters.revision);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Klaviyo-API-Key authentication
        }

        const response = await this.request({
            path: `/api/events/{id}/relationships/{related_resource}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"related_resource"}}`, encodeURIComponent(String(requestParameters.relatedResource))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetEventProfilesRelationshipListResponseCollectionFromJSON(jsonValue));
    }

    /**
     * Get metrics or profile [relationships](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#relationships) for an event with the given event ID.<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `Events Read` `Metrics Read` `Profiles Read`
     * Get Event Relationships
     */
    async getEventRelationships(requestParameters: GetEventRelationshipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetEventProfilesRelationshipListResponseCollection> {
        const response = await this.getEventRelationshipsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all events in an account Requests can be sorted by the following fields: `datetime`, `timestamp` Use filters to narrow your results to specific metrics. Request specific fields using [sparse fieldsets](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#sparse-fieldsets). Include parameters can be provided to get the following related resource data: `metrics`, `profiles` Returns a maximum of 200 events per page, which can be paginated with [cursor-based pagination](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#pagination).<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `Events Read`
     * Get Events
     */
    async getEventsRaw(requestParameters: GetEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetEventResponseCollectionWithIncludedSection>> {
        if (requestParameters.revision === null || requestParameters.revision === undefined) {
            throw new runtime.RequiredError('revision','Required parameter requestParameters.revision was null or undefined when calling getEvents.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsEvent) {
            queryParameters['fields[event]'] = requestParameters.fieldsEvent.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsMetric) {
            queryParameters['fields[metric]'] = requestParameters.fieldsMetric.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsProfile) {
            queryParameters['fields[profile]'] = requestParameters.fieldsProfile.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include;
        }

        if (requestParameters.pageCursor !== undefined) {
            queryParameters['page[cursor]'] = requestParameters.pageCursor;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.revision !== undefined && requestParameters.revision !== null) {
            headerParameters['revision'] = String(requestParameters.revision);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Klaviyo-API-Key authentication
        }

        const response = await this.request({
            path: `/api/events/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetEventResponseCollectionWithIncludedSectionFromJSON(jsonValue));
    }

    /**
     * Get all events in an account Requests can be sorted by the following fields: `datetime`, `timestamp` Use filters to narrow your results to specific metrics. Request specific fields using [sparse fieldsets](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#sparse-fieldsets). Include parameters can be provided to get the following related resource data: `metrics`, `profiles` Returns a maximum of 200 events per page, which can be paginated with [cursor-based pagination](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#pagination).<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `Events Read`
     * Get Events
     */
    async getEvents(requestParameters: GetEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetEventResponseCollectionWithIncludedSection> {
        const response = await this.getEventsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetEventFieldsEventEnum = {
    MetricId: 'metric_id',
    ProfileId: 'profile_id',
    Timestamp: 'timestamp',
    EventProperties: 'event_properties',
    Datetime: 'datetime',
    Uuid: 'uuid'
} as const;
export type GetEventFieldsEventEnum = typeof GetEventFieldsEventEnum[keyof typeof GetEventFieldsEventEnum];
/**
 * @export
 */
export const GetEventFieldsMetricEnum = {
    Name: 'name',
    Created: 'created',
    Updated: 'updated',
    Integration: 'integration'
} as const;
export type GetEventFieldsMetricEnum = typeof GetEventFieldsMetricEnum[keyof typeof GetEventFieldsMetricEnum];
/**
 * @export
 */
export const GetEventFieldsProfileEnum = {
    Email: 'email',
    PhoneNumber: 'phone_number',
    ExternalId: 'external_id',
    AnonymousId: 'anonymous_id',
    FirstName: 'first_name',
    LastName: 'last_name',
    Organization: 'organization',
    Title: 'title',
    Image: 'image',
    Created: 'created',
    Updated: 'updated',
    LastEventDate: 'last_event_date',
    Location: 'location',
    LocationAddress1: 'location.address1',
    LocationAddress2: 'location.address2',
    LocationCity: 'location.city',
    LocationCountry: 'location.country',
    LocationLatitude: 'location.latitude',
    LocationLongitude: 'location.longitude',
    LocationRegion: 'location.region',
    LocationZip: 'location.zip',
    LocationTimezone: 'location.timezone',
    Properties: 'properties'
} as const;
export type GetEventFieldsProfileEnum = typeof GetEventFieldsProfileEnum[keyof typeof GetEventFieldsProfileEnum];
/**
 * @export
 */
export const GetEventIncludeEnum = {
    Metrics: 'metrics',
    Profiles: 'profiles'
} as const;
export type GetEventIncludeEnum = typeof GetEventIncludeEnum[keyof typeof GetEventIncludeEnum];
/**
 * @export
 */
export const GetEventMetricsFieldsMetricEnum = {
    Name: 'name',
    Created: 'created',
    Updated: 'updated',
    Integration: 'integration'
} as const;
export type GetEventMetricsFieldsMetricEnum = typeof GetEventMetricsFieldsMetricEnum[keyof typeof GetEventMetricsFieldsMetricEnum];
/**
 * @export
 */
export const GetEventProfilesFieldsProfileEnum = {
    Email: 'email',
    PhoneNumber: 'phone_number',
    ExternalId: 'external_id',
    AnonymousId: 'anonymous_id',
    FirstName: 'first_name',
    LastName: 'last_name',
    Organization: 'organization',
    Title: 'title',
    Image: 'image',
    Created: 'created',
    Updated: 'updated',
    LastEventDate: 'last_event_date',
    Location: 'location',
    LocationAddress1: 'location.address1',
    LocationAddress2: 'location.address2',
    LocationCity: 'location.city',
    LocationCountry: 'location.country',
    LocationLatitude: 'location.latitude',
    LocationLongitude: 'location.longitude',
    LocationRegion: 'location.region',
    LocationZip: 'location.zip',
    LocationTimezone: 'location.timezone',
    Properties: 'properties'
} as const;
export type GetEventProfilesFieldsProfileEnum = typeof GetEventProfilesFieldsProfileEnum[keyof typeof GetEventProfilesFieldsProfileEnum];
/**
 * @export
 */
export const GetEventRelationshipsRelatedResourceEnum = {
    Metrics: 'metrics',
    Profiles: 'profiles'
} as const;
export type GetEventRelationshipsRelatedResourceEnum = typeof GetEventRelationshipsRelatedResourceEnum[keyof typeof GetEventRelationshipsRelatedResourceEnum];
/**
 * @export
 */
export const GetEventsFieldsEventEnum = {
    MetricId: 'metric_id',
    ProfileId: 'profile_id',
    Timestamp: 'timestamp',
    EventProperties: 'event_properties',
    Datetime: 'datetime',
    Uuid: 'uuid'
} as const;
export type GetEventsFieldsEventEnum = typeof GetEventsFieldsEventEnum[keyof typeof GetEventsFieldsEventEnum];
/**
 * @export
 */
export const GetEventsFieldsMetricEnum = {
    Name: 'name',
    Created: 'created',
    Updated: 'updated',
    Integration: 'integration'
} as const;
export type GetEventsFieldsMetricEnum = typeof GetEventsFieldsMetricEnum[keyof typeof GetEventsFieldsMetricEnum];
/**
 * @export
 */
export const GetEventsFieldsProfileEnum = {
    Email: 'email',
    PhoneNumber: 'phone_number',
    ExternalId: 'external_id',
    AnonymousId: 'anonymous_id',
    FirstName: 'first_name',
    LastName: 'last_name',
    Organization: 'organization',
    Title: 'title',
    Image: 'image',
    Created: 'created',
    Updated: 'updated',
    LastEventDate: 'last_event_date',
    Location: 'location',
    LocationAddress1: 'location.address1',
    LocationAddress2: 'location.address2',
    LocationCity: 'location.city',
    LocationCountry: 'location.country',
    LocationLatitude: 'location.latitude',
    LocationLongitude: 'location.longitude',
    LocationRegion: 'location.region',
    LocationZip: 'location.zip',
    LocationTimezone: 'location.timezone',
    Properties: 'properties'
} as const;
export type GetEventsFieldsProfileEnum = typeof GetEventsFieldsProfileEnum[keyof typeof GetEventsFieldsProfileEnum];
/**
 * @export
 */
export const GetEventsIncludeEnum = {
    Metrics: 'metrics',
    Profiles: 'profiles'
} as const;
export type GetEventsIncludeEnum = typeof GetEventsIncludeEnum[keyof typeof GetEventsIncludeEnum];
/**
 * @export
 */
export const GetEventsSortEnum = {
    Datetime: 'datetime',
    Datetime: '-datetime',
    Timestamp: 'timestamp',
    Timestamp: '-timestamp'
} as const;
export type GetEventsSortEnum = typeof GetEventsSortEnum[keyof typeof GetEventsSortEnum];
