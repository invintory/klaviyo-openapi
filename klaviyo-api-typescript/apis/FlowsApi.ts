/* tslint:disable */
/* eslint-disable */
/**
 * Klaviyo API
 * The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.
 *
 * The version of the OpenAPI document: 2022-10-17
 * Contact: developers@klaviyo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  FlowUpdateQuery,
  GetCatalogItems4XXResponse,
  GetFlowActionFlowMessageRelationshipResponseCollection,
  GetFlowActionResponse,
  GetFlowActionResponseCollection,
  GetFlowActionResponseWithIncludedSection,
  GetFlowMessageFlowActionRelationshipResponseCollection,
  GetFlowMessageResponseCollection,
  GetFlowMessageResponseWithIncludedSection,
  GetFlowResponse,
  GetFlowResponseCollectionWithIncludedSection,
  GetFlowResponseWithIncludedSection,
  PatchFlowResponse,
} from '../models';
import {
    FlowUpdateQueryFromJSON,
    FlowUpdateQueryToJSON,
    GetCatalogItems4XXResponseFromJSON,
    GetCatalogItems4XXResponseToJSON,
    GetFlowActionFlowMessageRelationshipResponseCollectionFromJSON,
    GetFlowActionFlowMessageRelationshipResponseCollectionToJSON,
    GetFlowActionResponseFromJSON,
    GetFlowActionResponseToJSON,
    GetFlowActionResponseCollectionFromJSON,
    GetFlowActionResponseCollectionToJSON,
    GetFlowActionResponseWithIncludedSectionFromJSON,
    GetFlowActionResponseWithIncludedSectionToJSON,
    GetFlowMessageFlowActionRelationshipResponseCollectionFromJSON,
    GetFlowMessageFlowActionRelationshipResponseCollectionToJSON,
    GetFlowMessageResponseCollectionFromJSON,
    GetFlowMessageResponseCollectionToJSON,
    GetFlowMessageResponseWithIncludedSectionFromJSON,
    GetFlowMessageResponseWithIncludedSectionToJSON,
    GetFlowResponseFromJSON,
    GetFlowResponseToJSON,
    GetFlowResponseCollectionWithIncludedSectionFromJSON,
    GetFlowResponseCollectionWithIncludedSectionToJSON,
    GetFlowResponseWithIncludedSectionFromJSON,
    GetFlowResponseWithIncludedSectionToJSON,
    PatchFlowResponseFromJSON,
    PatchFlowResponseToJSON,
} from '../models';

export interface GetFlowRequest {
    id: string;
    revision: string;
    fieldsFlowAction?: Array<GetFlowFieldsFlowActionEnum>;
    fieldsFlow?: Array<GetFlowFieldsFlowEnum>;
    fieldsTag?: Array<GetFlowFieldsTagEnum>;
    include?: Array<GetFlowIncludeEnum>;
}

export interface GetFlowActionRequest {
    id: string;
    revision: string;
    fieldsFlowAction?: Array<GetFlowActionFieldsFlowActionEnum>;
    fieldsFlowMessage?: Array<GetFlowActionFieldsFlowMessageEnum>;
    fieldsFlow?: Array<GetFlowActionFieldsFlowEnum>;
    include?: Array<GetFlowActionIncludeEnum>;
}

export interface GetFlowActionFlowRequest {
    actionId: string;
    revision: string;
    fieldsFlow?: Array<GetFlowActionFlowFieldsFlowEnum>;
}

export interface GetFlowActionMessagesRequest {
    actionId: string;
    revision: string;
    fieldsFlowMessage?: Array<GetFlowActionMessagesFieldsFlowMessageEnum>;
    filter?: string;
    sort?: GetFlowActionMessagesSortEnum;
}

export interface GetFlowActionRelationshipsRequest {
    id: string;
    relatedResource: GetFlowActionRelationshipsRelatedResourceEnum;
    revision: string;
    filter?: string;
    sort?: GetFlowActionRelationshipsSortEnum;
}

export interface GetFlowFlowActionsRequest {
    flowId: string;
    revision: string;
    fieldsFlowAction?: Array<GetFlowFlowActionsFieldsFlowActionEnum>;
    filter?: string;
    sort?: GetFlowFlowActionsSortEnum;
}

export interface GetFlowMessageRequest {
    id: string;
    revision: string;
    fieldsFlowAction?: Array<GetFlowMessageFieldsFlowActionEnum>;
    fieldsFlowMessage?: Array<GetFlowMessageFieldsFlowMessageEnum>;
    include?: Array<GetFlowMessageIncludeEnum>;
}

export interface GetFlowMessageActionRequest {
    messageId: string;
    revision: string;
    fieldsFlowAction?: Array<GetFlowMessageActionFieldsFlowActionEnum>;
}

export interface GetFlowMessageRelationshipsRequest {
    id: string;
    relatedResource: GetFlowMessageRelationshipsRelatedResourceEnum;
    revision: string;
}

export interface GetFlowsRequest {
    revision: string;
    fieldsFlowAction?: Array<GetFlowsFieldsFlowActionEnum>;
    fieldsFlow?: Array<GetFlowsFieldsFlowEnum>;
    fieldsTag?: Array<GetFlowsFieldsTagEnum>;
    filter?: string;
    include?: Array<GetFlowsIncludeEnum>;
    sort?: GetFlowsSortEnum;
}

export interface UpdateFlowRequest {
    id: string;
    revision: string;
    flowUpdateQuery: FlowUpdateQuery;
}

/**
 * 
 */
export class FlowsApi extends runtime.BaseAPI {

    /**
     * Get a flow with the given flow ID. Request specific fields using [sparse fieldsets](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#sparse-fieldsets). Include parameters can be provided to get the following related resource data: `flow-actions`<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`  **Scopes:** `Flows Read`
     * Get Flow
     */
    async getFlowRaw(requestParameters: GetFlowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetFlowResponseWithIncludedSection>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getFlow.');
        }

        if (requestParameters.revision === null || requestParameters.revision === undefined) {
            throw new runtime.RequiredError('revision','Required parameter requestParameters.revision was null or undefined when calling getFlow.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsFlowAction) {
            queryParameters['fields[flow-action]'] = requestParameters.fieldsFlowAction.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsFlow) {
            queryParameters['fields[flow]'] = requestParameters.fieldsFlow.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsTag) {
            queryParameters['fields[tag]'] = requestParameters.fieldsTag.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.revision !== undefined && requestParameters.revision !== null) {
            headerParameters['revision'] = String(requestParameters.revision);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Klaviyo-API-Key authentication
        }

        const response = await this.request({
            path: `/api/flows/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetFlowResponseWithIncludedSectionFromJSON(jsonValue));
    }

    /**
     * Get a flow with the given flow ID. Request specific fields using [sparse fieldsets](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#sparse-fieldsets). Include parameters can be provided to get the following related resource data: `flow-actions`<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`  **Scopes:** `Flows Read`
     * Get Flow
     */
    async getFlow(requestParameters: GetFlowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetFlowResponseWithIncludedSection> {
        const response = await this.getFlowRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a flow action from a flow with the given flow action ID. Include parameters can be provided to get the following related resource data: `flows`, `flow-messages`<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`  **Scopes:** `Flows Read`
     * Get Flow Action
     */
    async getFlowActionRaw(requestParameters: GetFlowActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetFlowActionResponseWithIncludedSection>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getFlowAction.');
        }

        if (requestParameters.revision === null || requestParameters.revision === undefined) {
            throw new runtime.RequiredError('revision','Required parameter requestParameters.revision was null or undefined when calling getFlowAction.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsFlowAction) {
            queryParameters['fields[flow-action]'] = requestParameters.fieldsFlowAction.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsFlowMessage) {
            queryParameters['fields[flow-message]'] = requestParameters.fieldsFlowMessage.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsFlow) {
            queryParameters['fields[flow]'] = requestParameters.fieldsFlow.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.revision !== undefined && requestParameters.revision !== null) {
            headerParameters['revision'] = String(requestParameters.revision);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Klaviyo-API-Key authentication
        }

        const response = await this.request({
            path: `/api/flow-actions/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetFlowActionResponseWithIncludedSectionFromJSON(jsonValue));
    }

    /**
     * Get a flow action from a flow with the given flow action ID. Include parameters can be provided to get the following related resource data: `flows`, `flow-messages`<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`  **Scopes:** `Flows Read`
     * Get Flow Action
     */
    async getFlowAction(requestParameters: GetFlowActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetFlowActionResponseWithIncludedSection> {
        const response = await this.getFlowActionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the flow associated with the given action ID.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`  **Scopes:** `Flows Read`
     * Get Flow For Flow Action
     */
    async getFlowActionFlowRaw(requestParameters: GetFlowActionFlowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetFlowResponse>> {
        if (requestParameters.actionId === null || requestParameters.actionId === undefined) {
            throw new runtime.RequiredError('actionId','Required parameter requestParameters.actionId was null or undefined when calling getFlowActionFlow.');
        }

        if (requestParameters.revision === null || requestParameters.revision === undefined) {
            throw new runtime.RequiredError('revision','Required parameter requestParameters.revision was null or undefined when calling getFlowActionFlow.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsFlow) {
            queryParameters['fields[flow]'] = requestParameters.fieldsFlow.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.revision !== undefined && requestParameters.revision !== null) {
            headerParameters['revision'] = String(requestParameters.revision);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Klaviyo-API-Key authentication
        }

        const response = await this.request({
            path: `/api/flow-actions/{action_id}/flow/`.replace(`{${"action_id"}}`, encodeURIComponent(String(requestParameters.actionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetFlowResponseFromJSON(jsonValue));
    }

    /**
     * Get the flow associated with the given action ID.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`  **Scopes:** `Flows Read`
     * Get Flow For Flow Action
     */
    async getFlowActionFlow(requestParameters: GetFlowActionFlowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetFlowResponse> {
        const response = await this.getFlowActionFlowRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all flow messages associated with the given action ID.  Flow messages can be sorted by the following fields, in ascending and descending order:  ascending: `id`,  `name`, `created`, `updated` descending: `-id`,  `-name`, `-created`, `-updated`  Use filters to narrow your results. Request specific fields using [sparse fieldsets](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#sparse-fieldsets).  Returns a maximum of 50 flows per request, which can be paginated with [offset pagination](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#pagination). Offset pagination uses the following parameters: `page[size]` and `page[number]`<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`  **Scopes:** `Flows Read`
     * Get Messages For Flow Action
     */
    async getFlowActionMessagesRaw(requestParameters: GetFlowActionMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetFlowMessageResponseCollection>> {
        if (requestParameters.actionId === null || requestParameters.actionId === undefined) {
            throw new runtime.RequiredError('actionId','Required parameter requestParameters.actionId was null or undefined when calling getFlowActionMessages.');
        }

        if (requestParameters.revision === null || requestParameters.revision === undefined) {
            throw new runtime.RequiredError('revision','Required parameter requestParameters.revision was null or undefined when calling getFlowActionMessages.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsFlowMessage) {
            queryParameters['fields[flow-message]'] = requestParameters.fieldsFlowMessage.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.revision !== undefined && requestParameters.revision !== null) {
            headerParameters['revision'] = String(requestParameters.revision);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Klaviyo-API-Key authentication
        }

        const response = await this.request({
            path: `/api/flow-actions/{action_id}/flow-messages/`.replace(`{${"action_id"}}`, encodeURIComponent(String(requestParameters.actionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetFlowMessageResponseCollectionFromJSON(jsonValue));
    }

    /**
     * Get all flow messages associated with the given action ID.  Flow messages can be sorted by the following fields, in ascending and descending order:  ascending: `id`,  `name`, `created`, `updated` descending: `-id`,  `-name`, `-created`, `-updated`  Use filters to narrow your results. Request specific fields using [sparse fieldsets](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#sparse-fieldsets).  Returns a maximum of 50 flows per request, which can be paginated with [offset pagination](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#pagination). Offset pagination uses the following parameters: `page[size]` and `page[number]`<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`  **Scopes:** `Flows Read`
     * Get Messages For Flow Action
     */
    async getFlowActionMessages(requestParameters: GetFlowActionMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetFlowMessageResponseCollection> {
        const response = await this.getFlowActionMessagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all [relationships](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#relationships) for flow messages associated with the given flow action ID.  Flow message relationships can be sorted by the following fields, in ascending and descending order:  `id`,  `name`, `created`, `updated`  Use filters to narrow your results.  Returns a maximum of 50 flow message relationships per request, which can be paginated with [offset pagination](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#pagination). Offset pagination uses the following parameters: `page[size]` and `page[number]`<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`  **Scopes:** `Flows Read`
     * Get Flow Action Relationships
     */
    async getFlowActionRelationshipsRaw(requestParameters: GetFlowActionRelationshipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetFlowActionFlowMessageRelationshipResponseCollection>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getFlowActionRelationships.');
        }

        if (requestParameters.relatedResource === null || requestParameters.relatedResource === undefined) {
            throw new runtime.RequiredError('relatedResource','Required parameter requestParameters.relatedResource was null or undefined when calling getFlowActionRelationships.');
        }

        if (requestParameters.revision === null || requestParameters.revision === undefined) {
            throw new runtime.RequiredError('revision','Required parameter requestParameters.revision was null or undefined when calling getFlowActionRelationships.');
        }

        const queryParameters: any = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.revision !== undefined && requestParameters.revision !== null) {
            headerParameters['revision'] = String(requestParameters.revision);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Klaviyo-API-Key authentication
        }

        const response = await this.request({
            path: `/api/flow-actions/{id}/relationships/{related_resource}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"related_resource"}}`, encodeURIComponent(String(requestParameters.relatedResource))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetFlowActionFlowMessageRelationshipResponseCollectionFromJSON(jsonValue));
    }

    /**
     * Get all [relationships](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#relationships) for flow messages associated with the given flow action ID.  Flow message relationships can be sorted by the following fields, in ascending and descending order:  `id`,  `name`, `created`, `updated`  Use filters to narrow your results.  Returns a maximum of 50 flow message relationships per request, which can be paginated with [offset pagination](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#pagination). Offset pagination uses the following parameters: `page[size]` and `page[number]`<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`  **Scopes:** `Flows Read`
     * Get Flow Action Relationships
     */
    async getFlowActionRelationships(requestParameters: GetFlowActionRelationshipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetFlowActionFlowMessageRelationshipResponseCollection> {
        const response = await this.getFlowActionRelationshipsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all flow actions associated with the given flow ID. Flow actions can be sorted by the following fields, in ascending and descending order: `id`,  `status`, `created`, `updated`, `action_type` Use filters to narrow your results. Request specific fields using [sparse fieldsets](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#sparse-fieldsets). Returns a maximum of 50 flows per request, which can be paginated with [offset pagination](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#pagination). Offset pagination uses the following parameters: `page[size]` and `page[number]`<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`  **Scopes:** `Flows Read`
     * Get Flow Actions For Flow
     */
    async getFlowFlowActionsRaw(requestParameters: GetFlowFlowActionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetFlowActionResponseCollection>> {
        if (requestParameters.flowId === null || requestParameters.flowId === undefined) {
            throw new runtime.RequiredError('flowId','Required parameter requestParameters.flowId was null or undefined when calling getFlowFlowActions.');
        }

        if (requestParameters.revision === null || requestParameters.revision === undefined) {
            throw new runtime.RequiredError('revision','Required parameter requestParameters.revision was null or undefined when calling getFlowFlowActions.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsFlowAction) {
            queryParameters['fields[flow-action]'] = requestParameters.fieldsFlowAction.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.revision !== undefined && requestParameters.revision !== null) {
            headerParameters['revision'] = String(requestParameters.revision);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Klaviyo-API-Key authentication
        }

        const response = await this.request({
            path: `/api/flows/{flow_id}/flow-actions/`.replace(`{${"flow_id"}}`, encodeURIComponent(String(requestParameters.flowId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetFlowActionResponseCollectionFromJSON(jsonValue));
    }

    /**
     * Get all flow actions associated with the given flow ID. Flow actions can be sorted by the following fields, in ascending and descending order: `id`,  `status`, `created`, `updated`, `action_type` Use filters to narrow your results. Request specific fields using [sparse fieldsets](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#sparse-fieldsets). Returns a maximum of 50 flows per request, which can be paginated with [offset pagination](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#pagination). Offset pagination uses the following parameters: `page[size]` and `page[number]`<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`  **Scopes:** `Flows Read`
     * Get Flow Actions For Flow
     */
    async getFlowFlowActions(requestParameters: GetFlowFlowActionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetFlowActionResponseCollection> {
        const response = await this.getFlowFlowActionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the flow message of a flow with the given message ID. Request specific fields using [sparse fieldsets](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#sparse-fieldsets). Include parameters can be provided to get the following related resource data: \'flow-actions\'<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`  **Scopes:** `Flows Read`
     * Get Flow Message
     */
    async getFlowMessageRaw(requestParameters: GetFlowMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetFlowMessageResponseWithIncludedSection>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getFlowMessage.');
        }

        if (requestParameters.revision === null || requestParameters.revision === undefined) {
            throw new runtime.RequiredError('revision','Required parameter requestParameters.revision was null or undefined when calling getFlowMessage.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsFlowAction) {
            queryParameters['fields[flow-action]'] = requestParameters.fieldsFlowAction.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsFlowMessage) {
            queryParameters['fields[flow-message]'] = requestParameters.fieldsFlowMessage.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.revision !== undefined && requestParameters.revision !== null) {
            headerParameters['revision'] = String(requestParameters.revision);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Klaviyo-API-Key authentication
        }

        const response = await this.request({
            path: `/api/flow-messages/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetFlowMessageResponseWithIncludedSectionFromJSON(jsonValue));
    }

    /**
     * Get the flow message of a flow with the given message ID. Request specific fields using [sparse fieldsets](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#sparse-fieldsets). Include parameters can be provided to get the following related resource data: \'flow-actions\'<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`  **Scopes:** `Flows Read`
     * Get Flow Message
     */
    async getFlowMessage(requestParameters: GetFlowMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetFlowMessageResponseWithIncludedSection> {
        const response = await this.getFlowMessageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the flow action for a flow message with the given message ID. Request specific fields using [sparse fieldsets](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#sparse-fieldsets).<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`  **Scopes:** `Flows Read`
     * Get Flow Action For Message
     */
    async getFlowMessageActionRaw(requestParameters: GetFlowMessageActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetFlowActionResponse>> {
        if (requestParameters.messageId === null || requestParameters.messageId === undefined) {
            throw new runtime.RequiredError('messageId','Required parameter requestParameters.messageId was null or undefined when calling getFlowMessageAction.');
        }

        if (requestParameters.revision === null || requestParameters.revision === undefined) {
            throw new runtime.RequiredError('revision','Required parameter requestParameters.revision was null or undefined when calling getFlowMessageAction.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsFlowAction) {
            queryParameters['fields[flow-action]'] = requestParameters.fieldsFlowAction.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.revision !== undefined && requestParameters.revision !== null) {
            headerParameters['revision'] = String(requestParameters.revision);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Klaviyo-API-Key authentication
        }

        const response = await this.request({
            path: `/api/flow-messages/{message_id}/flow-action/`.replace(`{${"message_id"}}`, encodeURIComponent(String(requestParameters.messageId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetFlowActionResponseFromJSON(jsonValue));
    }

    /**
     * Get the flow action for a flow message with the given message ID. Request specific fields using [sparse fieldsets](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#sparse-fieldsets).<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`  **Scopes:** `Flows Read`
     * Get Flow Action For Message
     */
    async getFlowMessageAction(requestParameters: GetFlowMessageActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetFlowActionResponse> {
        const response = await this.getFlowMessageActionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the [relationship](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#relationships) for a flow message\'s flow action, given the flow ID.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`  **Scopes:** `Flows Read`
     * Get Flow Message Relationships
     */
    async getFlowMessageRelationshipsRaw(requestParameters: GetFlowMessageRelationshipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetFlowMessageFlowActionRelationshipResponseCollection>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getFlowMessageRelationships.');
        }

        if (requestParameters.relatedResource === null || requestParameters.relatedResource === undefined) {
            throw new runtime.RequiredError('relatedResource','Required parameter requestParameters.relatedResource was null or undefined when calling getFlowMessageRelationships.');
        }

        if (requestParameters.revision === null || requestParameters.revision === undefined) {
            throw new runtime.RequiredError('revision','Required parameter requestParameters.revision was null or undefined when calling getFlowMessageRelationships.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.revision !== undefined && requestParameters.revision !== null) {
            headerParameters['revision'] = String(requestParameters.revision);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Klaviyo-API-Key authentication
        }

        const response = await this.request({
            path: `/api/flow-messages/{id}/relationships/{related_resource}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"related_resource"}}`, encodeURIComponent(String(requestParameters.relatedResource))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetFlowMessageFlowActionRelationshipResponseCollectionFromJSON(jsonValue));
    }

    /**
     * Get the [relationship](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#relationships) for a flow message\'s flow action, given the flow ID.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`  **Scopes:** `Flows Read`
     * Get Flow Message Relationships
     */
    async getFlowMessageRelationships(requestParameters: GetFlowMessageRelationshipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetFlowMessageFlowActionRelationshipResponseCollection> {
        const response = await this.getFlowMessageRelationshipsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all flows in an account. Flows can be sorted by the following fields, in ascending and descending order: `id`, `name`, `status`, `trigger_type`, `created`, `updated` Use filters to narrow your results. Request specific fields using [sparse fieldsets](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#sparse-fieldsets). Include parameters can be provided to get the following related resource data: `flow-actions` Returns a maximum of 50 flows per request, which can be paginated with [offset pagination](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#pagination)<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`  **Scopes:** `Flows Read`
     * Get Flows
     */
    async getFlowsRaw(requestParameters: GetFlowsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetFlowResponseCollectionWithIncludedSection>> {
        if (requestParameters.revision === null || requestParameters.revision === undefined) {
            throw new runtime.RequiredError('revision','Required parameter requestParameters.revision was null or undefined when calling getFlows.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsFlowAction) {
            queryParameters['fields[flow-action]'] = requestParameters.fieldsFlowAction.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsFlow) {
            queryParameters['fields[flow]'] = requestParameters.fieldsFlow.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsTag) {
            queryParameters['fields[tag]'] = requestParameters.fieldsTag.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.revision !== undefined && requestParameters.revision !== null) {
            headerParameters['revision'] = String(requestParameters.revision);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Klaviyo-API-Key authentication
        }

        const response = await this.request({
            path: `/api/flows/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetFlowResponseCollectionWithIncludedSectionFromJSON(jsonValue));
    }

    /**
     * Get all flows in an account. Flows can be sorted by the following fields, in ascending and descending order: `id`, `name`, `status`, `trigger_type`, `created`, `updated` Use filters to narrow your results. Request specific fields using [sparse fieldsets](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#sparse-fieldsets). Include parameters can be provided to get the following related resource data: `flow-actions` Returns a maximum of 50 flows per request, which can be paginated with [offset pagination](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#pagination)<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`  **Scopes:** `Flows Read`
     * Get Flows
     */
    async getFlows(requestParameters: GetFlowsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetFlowResponseCollectionWithIncludedSection> {
        const response = await this.getFlowsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update the status of a flow with the given flow ID, and all actions in that flow.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`  **Scopes:** `Flows Write`
     * Update Flow Status
     */
    async updateFlowRaw(requestParameters: UpdateFlowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PatchFlowResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateFlow.');
        }

        if (requestParameters.revision === null || requestParameters.revision === undefined) {
            throw new runtime.RequiredError('revision','Required parameter requestParameters.revision was null or undefined when calling updateFlow.');
        }

        if (requestParameters.flowUpdateQuery === null || requestParameters.flowUpdateQuery === undefined) {
            throw new runtime.RequiredError('flowUpdateQuery','Required parameter requestParameters.flowUpdateQuery was null or undefined when calling updateFlow.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.revision !== undefined && requestParameters.revision !== null) {
            headerParameters['revision'] = String(requestParameters.revision);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Klaviyo-API-Key authentication
        }

        const response = await this.request({
            path: `/api/flows/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: FlowUpdateQueryToJSON(requestParameters.flowUpdateQuery),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PatchFlowResponseFromJSON(jsonValue));
    }

    /**
     * Update the status of a flow with the given flow ID, and all actions in that flow.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`  **Scopes:** `Flows Write`
     * Update Flow Status
     */
    async updateFlow(requestParameters: UpdateFlowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PatchFlowResponse> {
        const response = await this.updateFlowRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetFlowFieldsFlowActionEnum = {
    ActionType: 'action_type',
    Status: 'status',
    Created: 'created',
    Updated: 'updated',
    Settings: 'settings',
    TrackingOptions: 'tracking_options',
    SendOptions: 'send_options',
    SendOptionsUseSmartSending: 'send_options.use_smart_sending',
    SendOptionsIsTransactional: 'send_options.is_transactional',
    RenderOptions: 'render_options',
    RenderOptionsShortenLinks: 'render_options.shorten_links',
    RenderOptionsAddOrgPrefix: 'render_options.add_org_prefix',
    RenderOptionsAddInfoLink: 'render_options.add_info_link',
    RenderOptionsAddOptOutLanguage: 'render_options.add_opt_out_language'
} as const;
export type GetFlowFieldsFlowActionEnum = typeof GetFlowFieldsFlowActionEnum[keyof typeof GetFlowFieldsFlowActionEnum];
/**
 * @export
 */
export const GetFlowFieldsFlowEnum = {
    Name: 'name',
    Status: 'status',
    Archived: 'archived',
    Created: 'created',
    Updated: 'updated',
    TriggerType: 'trigger_type'
} as const;
export type GetFlowFieldsFlowEnum = typeof GetFlowFieldsFlowEnum[keyof typeof GetFlowFieldsFlowEnum];
/**
 * @export
 */
export const GetFlowFieldsTagEnum = {
    Name: 'name'
} as const;
export type GetFlowFieldsTagEnum = typeof GetFlowFieldsTagEnum[keyof typeof GetFlowFieldsTagEnum];
/**
 * @export
 */
export const GetFlowIncludeEnum = {
    FlowActions: 'flow-actions',
    Tags: 'tags'
} as const;
export type GetFlowIncludeEnum = typeof GetFlowIncludeEnum[keyof typeof GetFlowIncludeEnum];
/**
 * @export
 */
export const GetFlowActionFieldsFlowActionEnum = {
    ActionType: 'action_type',
    Status: 'status',
    Created: 'created',
    Updated: 'updated',
    Settings: 'settings',
    TrackingOptions: 'tracking_options',
    SendOptions: 'send_options',
    SendOptionsUseSmartSending: 'send_options.use_smart_sending',
    SendOptionsIsTransactional: 'send_options.is_transactional',
    RenderOptions: 'render_options',
    RenderOptionsShortenLinks: 'render_options.shorten_links',
    RenderOptionsAddOrgPrefix: 'render_options.add_org_prefix',
    RenderOptionsAddInfoLink: 'render_options.add_info_link',
    RenderOptionsAddOptOutLanguage: 'render_options.add_opt_out_language'
} as const;
export type GetFlowActionFieldsFlowActionEnum = typeof GetFlowActionFieldsFlowActionEnum[keyof typeof GetFlowActionFieldsFlowActionEnum];
/**
 * @export
 */
export const GetFlowActionFieldsFlowMessageEnum = {
    Name: 'name',
    Channel: 'channel',
    Content: 'content',
    Created: 'created',
    Updated: 'updated'
} as const;
export type GetFlowActionFieldsFlowMessageEnum = typeof GetFlowActionFieldsFlowMessageEnum[keyof typeof GetFlowActionFieldsFlowMessageEnum];
/**
 * @export
 */
export const GetFlowActionFieldsFlowEnum = {
    Name: 'name',
    Status: 'status',
    Archived: 'archived',
    Created: 'created',
    Updated: 'updated',
    TriggerType: 'trigger_type'
} as const;
export type GetFlowActionFieldsFlowEnum = typeof GetFlowActionFieldsFlowEnum[keyof typeof GetFlowActionFieldsFlowEnum];
/**
 * @export
 */
export const GetFlowActionIncludeEnum = {
    FlowMessages: 'flow-messages',
    Flows: 'flows'
} as const;
export type GetFlowActionIncludeEnum = typeof GetFlowActionIncludeEnum[keyof typeof GetFlowActionIncludeEnum];
/**
 * @export
 */
export const GetFlowActionFlowFieldsFlowEnum = {
    Name: 'name',
    Status: 'status',
    Archived: 'archived',
    Created: 'created',
    Updated: 'updated',
    TriggerType: 'trigger_type'
} as const;
export type GetFlowActionFlowFieldsFlowEnum = typeof GetFlowActionFlowFieldsFlowEnum[keyof typeof GetFlowActionFlowFieldsFlowEnum];
/**
 * @export
 */
export const GetFlowActionMessagesFieldsFlowMessageEnum = {
    Name: 'name',
    Channel: 'channel',
    Content: 'content',
    Created: 'created',
    Updated: 'updated'
} as const;
export type GetFlowActionMessagesFieldsFlowMessageEnum = typeof GetFlowActionMessagesFieldsFlowMessageEnum[keyof typeof GetFlowActionMessagesFieldsFlowMessageEnum];
/**
 * @export
 */
export const GetFlowActionMessagesSortEnum = {
    Created: 'created',
    Created: '-created',
    Id: 'id',
    Id: '-id',
    Name: 'name',
    Name: '-name',
    Updated: 'updated',
    Updated: '-updated'
} as const;
export type GetFlowActionMessagesSortEnum = typeof GetFlowActionMessagesSortEnum[keyof typeof GetFlowActionMessagesSortEnum];
/**
 * @export
 */
export const GetFlowActionRelationshipsRelatedResourceEnum = {
    Flow: 'flow',
    FlowMessages: 'flow-messages'
} as const;
export type GetFlowActionRelationshipsRelatedResourceEnum = typeof GetFlowActionRelationshipsRelatedResourceEnum[keyof typeof GetFlowActionRelationshipsRelatedResourceEnum];
/**
 * @export
 */
export const GetFlowActionRelationshipsSortEnum = {
    Created: 'created',
    Created: '-created',
    Id: 'id',
    Id: '-id',
    Name: 'name',
    Name: '-name',
    Updated: 'updated',
    Updated: '-updated'
} as const;
export type GetFlowActionRelationshipsSortEnum = typeof GetFlowActionRelationshipsSortEnum[keyof typeof GetFlowActionRelationshipsSortEnum];
/**
 * @export
 */
export const GetFlowFlowActionsFieldsFlowActionEnum = {
    ActionType: 'action_type',
    Status: 'status',
    Created: 'created',
    Updated: 'updated',
    Settings: 'settings',
    TrackingOptions: 'tracking_options',
    SendOptions: 'send_options',
    SendOptionsUseSmartSending: 'send_options.use_smart_sending',
    SendOptionsIsTransactional: 'send_options.is_transactional',
    RenderOptions: 'render_options',
    RenderOptionsShortenLinks: 'render_options.shorten_links',
    RenderOptionsAddOrgPrefix: 'render_options.add_org_prefix',
    RenderOptionsAddInfoLink: 'render_options.add_info_link',
    RenderOptionsAddOptOutLanguage: 'render_options.add_opt_out_language'
} as const;
export type GetFlowFlowActionsFieldsFlowActionEnum = typeof GetFlowFlowActionsFieldsFlowActionEnum[keyof typeof GetFlowFlowActionsFieldsFlowActionEnum];
/**
 * @export
 */
export const GetFlowFlowActionsSortEnum = {
    ActionType: 'action_type',
    ActionType: '-action_type',
    Created: 'created',
    Created: '-created',
    Id: 'id',
    Id: '-id',
    Status: 'status',
    Status: '-status',
    Updated: 'updated',
    Updated: '-updated'
} as const;
export type GetFlowFlowActionsSortEnum = typeof GetFlowFlowActionsSortEnum[keyof typeof GetFlowFlowActionsSortEnum];
/**
 * @export
 */
export const GetFlowMessageFieldsFlowActionEnum = {
    ActionType: 'action_type',
    Status: 'status',
    Created: 'created',
    Updated: 'updated',
    Settings: 'settings',
    TrackingOptions: 'tracking_options',
    SendOptions: 'send_options',
    SendOptionsUseSmartSending: 'send_options.use_smart_sending',
    SendOptionsIsTransactional: 'send_options.is_transactional',
    RenderOptions: 'render_options',
    RenderOptionsShortenLinks: 'render_options.shorten_links',
    RenderOptionsAddOrgPrefix: 'render_options.add_org_prefix',
    RenderOptionsAddInfoLink: 'render_options.add_info_link',
    RenderOptionsAddOptOutLanguage: 'render_options.add_opt_out_language'
} as const;
export type GetFlowMessageFieldsFlowActionEnum = typeof GetFlowMessageFieldsFlowActionEnum[keyof typeof GetFlowMessageFieldsFlowActionEnum];
/**
 * @export
 */
export const GetFlowMessageFieldsFlowMessageEnum = {
    Name: 'name',
    Channel: 'channel',
    Content: 'content',
    Created: 'created',
    Updated: 'updated'
} as const;
export type GetFlowMessageFieldsFlowMessageEnum = typeof GetFlowMessageFieldsFlowMessageEnum[keyof typeof GetFlowMessageFieldsFlowMessageEnum];
/**
 * @export
 */
export const GetFlowMessageIncludeEnum = {
    FlowAction: 'flow-action'
} as const;
export type GetFlowMessageIncludeEnum = typeof GetFlowMessageIncludeEnum[keyof typeof GetFlowMessageIncludeEnum];
/**
 * @export
 */
export const GetFlowMessageActionFieldsFlowActionEnum = {
    ActionType: 'action_type',
    Status: 'status',
    Created: 'created',
    Updated: 'updated',
    Settings: 'settings',
    TrackingOptions: 'tracking_options',
    SendOptions: 'send_options',
    SendOptionsUseSmartSending: 'send_options.use_smart_sending',
    SendOptionsIsTransactional: 'send_options.is_transactional',
    RenderOptions: 'render_options',
    RenderOptionsShortenLinks: 'render_options.shorten_links',
    RenderOptionsAddOrgPrefix: 'render_options.add_org_prefix',
    RenderOptionsAddInfoLink: 'render_options.add_info_link',
    RenderOptionsAddOptOutLanguage: 'render_options.add_opt_out_language'
} as const;
export type GetFlowMessageActionFieldsFlowActionEnum = typeof GetFlowMessageActionFieldsFlowActionEnum[keyof typeof GetFlowMessageActionFieldsFlowActionEnum];
/**
 * @export
 */
export const GetFlowMessageRelationshipsRelatedResourceEnum = {
    FlowAction: 'flow-action'
} as const;
export type GetFlowMessageRelationshipsRelatedResourceEnum = typeof GetFlowMessageRelationshipsRelatedResourceEnum[keyof typeof GetFlowMessageRelationshipsRelatedResourceEnum];
/**
 * @export
 */
export const GetFlowsFieldsFlowActionEnum = {
    ActionType: 'action_type',
    Status: 'status',
    Created: 'created',
    Updated: 'updated',
    Settings: 'settings',
    TrackingOptions: 'tracking_options',
    SendOptions: 'send_options',
    SendOptionsUseSmartSending: 'send_options.use_smart_sending',
    SendOptionsIsTransactional: 'send_options.is_transactional',
    RenderOptions: 'render_options',
    RenderOptionsShortenLinks: 'render_options.shorten_links',
    RenderOptionsAddOrgPrefix: 'render_options.add_org_prefix',
    RenderOptionsAddInfoLink: 'render_options.add_info_link',
    RenderOptionsAddOptOutLanguage: 'render_options.add_opt_out_language'
} as const;
export type GetFlowsFieldsFlowActionEnum = typeof GetFlowsFieldsFlowActionEnum[keyof typeof GetFlowsFieldsFlowActionEnum];
/**
 * @export
 */
export const GetFlowsFieldsFlowEnum = {
    Name: 'name',
    Status: 'status',
    Archived: 'archived',
    Created: 'created',
    Updated: 'updated',
    TriggerType: 'trigger_type'
} as const;
export type GetFlowsFieldsFlowEnum = typeof GetFlowsFieldsFlowEnum[keyof typeof GetFlowsFieldsFlowEnum];
/**
 * @export
 */
export const GetFlowsFieldsTagEnum = {
    Name: 'name'
} as const;
export type GetFlowsFieldsTagEnum = typeof GetFlowsFieldsTagEnum[keyof typeof GetFlowsFieldsTagEnum];
/**
 * @export
 */
export const GetFlowsIncludeEnum = {
    FlowActions: 'flow-actions',
    Tags: 'tags'
} as const;
export type GetFlowsIncludeEnum = typeof GetFlowsIncludeEnum[keyof typeof GetFlowsIncludeEnum];
/**
 * @export
 */
export const GetFlowsSortEnum = {
    Created: 'created',
    Created: '-created',
    Id: 'id',
    Id: '-id',
    Name: 'name',
    Name: '-name',
    Status: 'status',
    Status: '-status',
    TriggerType: 'trigger_type',
    TriggerType: '-trigger_type',
    Updated: 'updated',
    Updated: '-updated'
} as const;
export type GetFlowsSortEnum = typeof GetFlowsSortEnum[keyof typeof GetFlowsSortEnum];
