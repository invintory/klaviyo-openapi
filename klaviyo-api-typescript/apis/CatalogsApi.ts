/* tslint:disable */
/* eslint-disable */
/**
 * Klaviyo API
 * The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.
 *
 * The version of the OpenAPI document: 2022-10-17
 * Contact: developers@klaviyo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CatalogCategoryCreateJobCreateQuery,
  CatalogCategoryCreateQuery,
  CatalogCategoryDeleteJobCreateQuery,
  CatalogCategoryItemOp,
  CatalogCategoryUpdateJobCreateQuery,
  CatalogCategoryUpdateQuery,
  CatalogItemCategoryOp,
  CatalogItemCreateJobCreateQuery,
  CatalogItemCreateQuery,
  CatalogItemDeleteJobCreateQuery,
  CatalogItemUpdateJobCreateQuery,
  CatalogItemUpdateQuery,
  CatalogVariantCreateJobCreateQuery,
  CatalogVariantCreateQuery,
  CatalogVariantDeleteJobCreateQuery,
  CatalogVariantUpdateJobCreateQuery,
  CatalogVariantUpdateQuery,
  GetCatalogCategoryCreateJobResponseCollectionWithIncludedSection,
  GetCatalogCategoryCreateJobResponseWithIncludedSection,
  GetCatalogCategoryDeleteJobResponse,
  GetCatalogCategoryDeleteJobResponseCollection,
  GetCatalogCategoryItemListResponseCollection,
  GetCatalogCategoryResponse,
  GetCatalogCategoryResponseCollection,
  GetCatalogCategoryUpdateJobResponseCollectionWithIncludedSection,
  GetCatalogCategoryUpdateJobResponseWithIncludedSection,
  GetCatalogItemCategoryListResponseCollection,
  GetCatalogItemCreateJobResponseCollectionWithIncludedSection,
  GetCatalogItemCreateJobResponseWithIncludedSection,
  GetCatalogItemDeleteJobResponse,
  GetCatalogItemDeleteJobResponseCollection,
  GetCatalogItemResponseCollectionWithIncludedSection,
  GetCatalogItemResponseWithIncludedSection,
  GetCatalogItemUpdateJobResponseCollectionWithIncludedSection,
  GetCatalogItemUpdateJobResponseWithIncludedSection,
  GetCatalogItems4XXResponse,
  GetCatalogVariantCreateJobResponseCollectionWithIncludedSection,
  GetCatalogVariantCreateJobResponseWithIncludedSection,
  GetCatalogVariantDeleteJobResponse,
  GetCatalogVariantDeleteJobResponseCollection,
  GetCatalogVariantResponse,
  GetCatalogVariantResponseCollection,
  GetCatalogVariantUpdateJobResponseCollectionWithIncludedSection,
  GetCatalogVariantUpdateJobResponseWithIncludedSection,
  PatchCatalogCategoryResponse,
  PatchCatalogItemResponse,
  PatchCatalogVariantResponse,
  PostCatalogCategoryCreateJobResponse,
  PostCatalogCategoryDeleteJobResponse,
  PostCatalogCategoryResponse,
  PostCatalogCategoryUpdateJobResponse,
  PostCatalogItemCreateJobResponse,
  PostCatalogItemDeleteJobResponse,
  PostCatalogItemResponse,
  PostCatalogItemUpdateJobResponse,
  PostCatalogVariantCreateJobResponse,
  PostCatalogVariantDeleteJobResponse,
  PostCatalogVariantResponse,
  PostCatalogVariantUpdateJobResponse,
} from '../models';
import {
    CatalogCategoryCreateJobCreateQueryFromJSON,
    CatalogCategoryCreateJobCreateQueryToJSON,
    CatalogCategoryCreateQueryFromJSON,
    CatalogCategoryCreateQueryToJSON,
    CatalogCategoryDeleteJobCreateQueryFromJSON,
    CatalogCategoryDeleteJobCreateQueryToJSON,
    CatalogCategoryItemOpFromJSON,
    CatalogCategoryItemOpToJSON,
    CatalogCategoryUpdateJobCreateQueryFromJSON,
    CatalogCategoryUpdateJobCreateQueryToJSON,
    CatalogCategoryUpdateQueryFromJSON,
    CatalogCategoryUpdateQueryToJSON,
    CatalogItemCategoryOpFromJSON,
    CatalogItemCategoryOpToJSON,
    CatalogItemCreateJobCreateQueryFromJSON,
    CatalogItemCreateJobCreateQueryToJSON,
    CatalogItemCreateQueryFromJSON,
    CatalogItemCreateQueryToJSON,
    CatalogItemDeleteJobCreateQueryFromJSON,
    CatalogItemDeleteJobCreateQueryToJSON,
    CatalogItemUpdateJobCreateQueryFromJSON,
    CatalogItemUpdateJobCreateQueryToJSON,
    CatalogItemUpdateQueryFromJSON,
    CatalogItemUpdateQueryToJSON,
    CatalogVariantCreateJobCreateQueryFromJSON,
    CatalogVariantCreateJobCreateQueryToJSON,
    CatalogVariantCreateQueryFromJSON,
    CatalogVariantCreateQueryToJSON,
    CatalogVariantDeleteJobCreateQueryFromJSON,
    CatalogVariantDeleteJobCreateQueryToJSON,
    CatalogVariantUpdateJobCreateQueryFromJSON,
    CatalogVariantUpdateJobCreateQueryToJSON,
    CatalogVariantUpdateQueryFromJSON,
    CatalogVariantUpdateQueryToJSON,
    GetCatalogCategoryCreateJobResponseCollectionWithIncludedSectionFromJSON,
    GetCatalogCategoryCreateJobResponseCollectionWithIncludedSectionToJSON,
    GetCatalogCategoryCreateJobResponseWithIncludedSectionFromJSON,
    GetCatalogCategoryCreateJobResponseWithIncludedSectionToJSON,
    GetCatalogCategoryDeleteJobResponseFromJSON,
    GetCatalogCategoryDeleteJobResponseToJSON,
    GetCatalogCategoryDeleteJobResponseCollectionFromJSON,
    GetCatalogCategoryDeleteJobResponseCollectionToJSON,
    GetCatalogCategoryItemListResponseCollectionFromJSON,
    GetCatalogCategoryItemListResponseCollectionToJSON,
    GetCatalogCategoryResponseFromJSON,
    GetCatalogCategoryResponseToJSON,
    GetCatalogCategoryResponseCollectionFromJSON,
    GetCatalogCategoryResponseCollectionToJSON,
    GetCatalogCategoryUpdateJobResponseCollectionWithIncludedSectionFromJSON,
    GetCatalogCategoryUpdateJobResponseCollectionWithIncludedSectionToJSON,
    GetCatalogCategoryUpdateJobResponseWithIncludedSectionFromJSON,
    GetCatalogCategoryUpdateJobResponseWithIncludedSectionToJSON,
    GetCatalogItemCategoryListResponseCollectionFromJSON,
    GetCatalogItemCategoryListResponseCollectionToJSON,
    GetCatalogItemCreateJobResponseCollectionWithIncludedSectionFromJSON,
    GetCatalogItemCreateJobResponseCollectionWithIncludedSectionToJSON,
    GetCatalogItemCreateJobResponseWithIncludedSectionFromJSON,
    GetCatalogItemCreateJobResponseWithIncludedSectionToJSON,
    GetCatalogItemDeleteJobResponseFromJSON,
    GetCatalogItemDeleteJobResponseToJSON,
    GetCatalogItemDeleteJobResponseCollectionFromJSON,
    GetCatalogItemDeleteJobResponseCollectionToJSON,
    GetCatalogItemResponseCollectionWithIncludedSectionFromJSON,
    GetCatalogItemResponseCollectionWithIncludedSectionToJSON,
    GetCatalogItemResponseWithIncludedSectionFromJSON,
    GetCatalogItemResponseWithIncludedSectionToJSON,
    GetCatalogItemUpdateJobResponseCollectionWithIncludedSectionFromJSON,
    GetCatalogItemUpdateJobResponseCollectionWithIncludedSectionToJSON,
    GetCatalogItemUpdateJobResponseWithIncludedSectionFromJSON,
    GetCatalogItemUpdateJobResponseWithIncludedSectionToJSON,
    GetCatalogItems4XXResponseFromJSON,
    GetCatalogItems4XXResponseToJSON,
    GetCatalogVariantCreateJobResponseCollectionWithIncludedSectionFromJSON,
    GetCatalogVariantCreateJobResponseCollectionWithIncludedSectionToJSON,
    GetCatalogVariantCreateJobResponseWithIncludedSectionFromJSON,
    GetCatalogVariantCreateJobResponseWithIncludedSectionToJSON,
    GetCatalogVariantDeleteJobResponseFromJSON,
    GetCatalogVariantDeleteJobResponseToJSON,
    GetCatalogVariantDeleteJobResponseCollectionFromJSON,
    GetCatalogVariantDeleteJobResponseCollectionToJSON,
    GetCatalogVariantResponseFromJSON,
    GetCatalogVariantResponseToJSON,
    GetCatalogVariantResponseCollectionFromJSON,
    GetCatalogVariantResponseCollectionToJSON,
    GetCatalogVariantUpdateJobResponseCollectionWithIncludedSectionFromJSON,
    GetCatalogVariantUpdateJobResponseCollectionWithIncludedSectionToJSON,
    GetCatalogVariantUpdateJobResponseWithIncludedSectionFromJSON,
    GetCatalogVariantUpdateJobResponseWithIncludedSectionToJSON,
    PatchCatalogCategoryResponseFromJSON,
    PatchCatalogCategoryResponseToJSON,
    PatchCatalogItemResponseFromJSON,
    PatchCatalogItemResponseToJSON,
    PatchCatalogVariantResponseFromJSON,
    PatchCatalogVariantResponseToJSON,
    PostCatalogCategoryCreateJobResponseFromJSON,
    PostCatalogCategoryCreateJobResponseToJSON,
    PostCatalogCategoryDeleteJobResponseFromJSON,
    PostCatalogCategoryDeleteJobResponseToJSON,
    PostCatalogCategoryResponseFromJSON,
    PostCatalogCategoryResponseToJSON,
    PostCatalogCategoryUpdateJobResponseFromJSON,
    PostCatalogCategoryUpdateJobResponseToJSON,
    PostCatalogItemCreateJobResponseFromJSON,
    PostCatalogItemCreateJobResponseToJSON,
    PostCatalogItemDeleteJobResponseFromJSON,
    PostCatalogItemDeleteJobResponseToJSON,
    PostCatalogItemResponseFromJSON,
    PostCatalogItemResponseToJSON,
    PostCatalogItemUpdateJobResponseFromJSON,
    PostCatalogItemUpdateJobResponseToJSON,
    PostCatalogVariantCreateJobResponseFromJSON,
    PostCatalogVariantCreateJobResponseToJSON,
    PostCatalogVariantDeleteJobResponseFromJSON,
    PostCatalogVariantDeleteJobResponseToJSON,
    PostCatalogVariantResponseFromJSON,
    PostCatalogVariantResponseToJSON,
    PostCatalogVariantUpdateJobResponseFromJSON,
    PostCatalogVariantUpdateJobResponseToJSON,
} from '../models';

export interface CreateCatalogCategoryRequest {
    revision: string;
    catalogCategoryCreateQuery: CatalogCategoryCreateQuery;
}

export interface CreateCatalogCategoryRelationshipsRequest {
    id: string;
    relatedResource: CreateCatalogCategoryRelationshipsRelatedResourceEnum;
    revision: string;
    catalogCategoryItemOp: CatalogCategoryItemOp;
}

export interface CreateCatalogItemRequest {
    revision: string;
    catalogItemCreateQuery: CatalogItemCreateQuery;
}

export interface CreateCatalogItemRelationshipsRequest {
    id: string;
    relatedResource: CreateCatalogItemRelationshipsRelatedResourceEnum;
    revision: string;
    catalogItemCategoryOp: CatalogItemCategoryOp;
}

export interface CreateCatalogVariantRequest {
    revision: string;
    catalogVariantCreateQuery: CatalogVariantCreateQuery;
}

export interface DeleteCatalogCategoryRequest {
    id: string;
    revision: string;
}

export interface DeleteCatalogCategoryRelationshipsRequest {
    id: string;
    relatedResource: DeleteCatalogCategoryRelationshipsRelatedResourceEnum;
    revision: string;
    catalogCategoryItemOp: CatalogCategoryItemOp;
}

export interface DeleteCatalogItemRequest {
    id: string;
    revision: string;
}

export interface DeleteCatalogItemRelationshipsRequest {
    id: string;
    relatedResource: DeleteCatalogItemRelationshipsRelatedResourceEnum;
    revision: string;
    catalogItemCategoryOp: CatalogItemCategoryOp;
}

export interface DeleteCatalogVariantRequest {
    id: string;
    revision: string;
}

export interface GetCatalogCategoriesRequest {
    revision: string;
    fieldsCatalogCategory?: Array<GetCatalogCategoriesFieldsCatalogCategoryEnum>;
    filter?: string;
    pageCursor?: string;
    sort?: GetCatalogCategoriesSortEnum;
}

export interface GetCatalogCategoryRequest {
    id: string;
    revision: string;
    fieldsCatalogCategory?: Array<GetCatalogCategoryFieldsCatalogCategoryEnum>;
}

export interface GetCatalogCategoryItemsRequest {
    categoryId: string;
    revision: string;
    fieldsCatalogItem?: Array<GetCatalogCategoryItemsFieldsCatalogItemEnum>;
    fieldsCatalogVariant?: Array<GetCatalogCategoryItemsFieldsCatalogVariantEnum>;
    filter?: string;
    include?: Array<GetCatalogCategoryItemsIncludeEnum>;
    pageCursor?: string;
    sort?: GetCatalogCategoryItemsSortEnum;
}

export interface GetCatalogCategoryRelationshipsRequest {
    id: string;
    relatedResource: GetCatalogCategoryRelationshipsRelatedResourceEnum;
    revision: string;
    pageCursor?: string;
}

export interface GetCatalogItemRequest {
    id: string;
    revision: string;
    fieldsCatalogItem?: Array<GetCatalogItemFieldsCatalogItemEnum>;
    fieldsCatalogVariant?: Array<GetCatalogItemFieldsCatalogVariantEnum>;
    include?: Array<GetCatalogItemIncludeEnum>;
}

export interface GetCatalogItemCategoriesRequest {
    itemId: string;
    revision: string;
    fieldsCatalogCategory?: Array<GetCatalogItemCategoriesFieldsCatalogCategoryEnum>;
    filter?: string;
    pageCursor?: string;
    sort?: GetCatalogItemCategoriesSortEnum;
}

export interface GetCatalogItemRelationshipsRequest {
    id: string;
    relatedResource: GetCatalogItemRelationshipsRelatedResourceEnum;
    revision: string;
    pageCursor?: string;
}

export interface GetCatalogItemVariantsRequest {
    itemId: string;
    revision: string;
    fieldsCatalogVariant?: Array<GetCatalogItemVariantsFieldsCatalogVariantEnum>;
    filter?: string;
    pageCursor?: string;
    sort?: GetCatalogItemVariantsSortEnum;
}

export interface GetCatalogItemsRequest {
    revision: string;
    fieldsCatalogItem?: Array<GetCatalogItemsFieldsCatalogItemEnum>;
    fieldsCatalogVariant?: Array<GetCatalogItemsFieldsCatalogVariantEnum>;
    filter?: string;
    include?: Array<GetCatalogItemsIncludeEnum>;
    pageCursor?: string;
    sort?: GetCatalogItemsSortEnum;
}

export interface GetCatalogVariantRequest {
    id: string;
    revision: string;
    fieldsCatalogVariant?: Array<GetCatalogVariantFieldsCatalogVariantEnum>;
}

export interface GetCatalogVariantsRequest {
    revision: string;
    fieldsCatalogVariant?: Array<GetCatalogVariantsFieldsCatalogVariantEnum>;
    filter?: string;
    pageCursor?: string;
    sort?: GetCatalogVariantsSortEnum;
}

export interface GetCreateCategoriesJobRequest {
    jobId: string;
    revision: string;
    fieldsCatalogCategoryBulkCreateJob?: Array<GetCreateCategoriesJobFieldsCatalogCategoryBulkCreateJobEnum>;
    fieldsCatalogCategory?: Array<GetCreateCategoriesJobFieldsCatalogCategoryEnum>;
    include?: Array<GetCreateCategoriesJobIncludeEnum>;
}

export interface GetCreateCategoriesJobsRequest {
    revision: string;
    fieldsCatalogCategoryBulkCreateJob?: Array<GetCreateCategoriesJobsFieldsCatalogCategoryBulkCreateJobEnum>;
    filter?: string;
    pageCursor?: string;
}

export interface GetCreateItemsJobRequest {
    jobId: string;
    revision: string;
    fieldsCatalogItemBulkCreateJob?: Array<GetCreateItemsJobFieldsCatalogItemBulkCreateJobEnum>;
    fieldsCatalogItem?: Array<GetCreateItemsJobFieldsCatalogItemEnum>;
    include?: Array<GetCreateItemsJobIncludeEnum>;
}

export interface GetCreateItemsJobsRequest {
    revision: string;
    fieldsCatalogItemBulkCreateJob?: Array<GetCreateItemsJobsFieldsCatalogItemBulkCreateJobEnum>;
    filter?: string;
    pageCursor?: string;
}

export interface GetCreateVariantsJobRequest {
    jobId: string;
    revision: string;
    fieldsCatalogVariantBulkCreateJob?: Array<GetCreateVariantsJobFieldsCatalogVariantBulkCreateJobEnum>;
    fieldsCatalogVariant?: Array<GetCreateVariantsJobFieldsCatalogVariantEnum>;
    include?: Array<GetCreateVariantsJobIncludeEnum>;
}

export interface GetCreateVariantsJobsRequest {
    revision: string;
    fieldsCatalogVariantBulkCreateJob?: Array<GetCreateVariantsJobsFieldsCatalogVariantBulkCreateJobEnum>;
    filter?: string;
    pageCursor?: string;
}

export interface GetDeleteCategoriesJobRequest {
    jobId: string;
    revision: string;
    fieldsCatalogCategoryBulkDeleteJob?: Array<GetDeleteCategoriesJobFieldsCatalogCategoryBulkDeleteJobEnum>;
}

export interface GetDeleteCategoriesJobsRequest {
    revision: string;
    fieldsCatalogCategoryBulkDeleteJob?: Array<GetDeleteCategoriesJobsFieldsCatalogCategoryBulkDeleteJobEnum>;
    filter?: string;
    pageCursor?: string;
}

export interface GetDeleteItemsJobRequest {
    jobId: string;
    revision: string;
    fieldsCatalogItemBulkDeleteJob?: Array<GetDeleteItemsJobFieldsCatalogItemBulkDeleteJobEnum>;
}

export interface GetDeleteItemsJobsRequest {
    revision: string;
    fieldsCatalogItemBulkDeleteJob?: Array<GetDeleteItemsJobsFieldsCatalogItemBulkDeleteJobEnum>;
    filter?: string;
    pageCursor?: string;
}

export interface GetDeleteVariantsJobRequest {
    jobId: string;
    revision: string;
    fieldsCatalogVariantBulkDeleteJob?: Array<GetDeleteVariantsJobFieldsCatalogVariantBulkDeleteJobEnum>;
}

export interface GetDeleteVariantsJobsRequest {
    revision: string;
    fieldsCatalogVariantBulkDeleteJob?: Array<GetDeleteVariantsJobsFieldsCatalogVariantBulkDeleteJobEnum>;
    filter?: string;
    pageCursor?: string;
}

export interface GetUpdateCategoriesJobRequest {
    jobId: string;
    revision: string;
    fieldsCatalogCategoryBulkUpdateJob?: Array<GetUpdateCategoriesJobFieldsCatalogCategoryBulkUpdateJobEnum>;
    fieldsCatalogCategory?: Array<GetUpdateCategoriesJobFieldsCatalogCategoryEnum>;
    include?: Array<GetUpdateCategoriesJobIncludeEnum>;
}

export interface GetUpdateCategoriesJobsRequest {
    revision: string;
    fieldsCatalogCategoryBulkUpdateJob?: Array<GetUpdateCategoriesJobsFieldsCatalogCategoryBulkUpdateJobEnum>;
    filter?: string;
    pageCursor?: string;
}

export interface GetUpdateItemsJobRequest {
    jobId: string;
    revision: string;
    fieldsCatalogItemBulkUpdateJob?: Array<GetUpdateItemsJobFieldsCatalogItemBulkUpdateJobEnum>;
    fieldsCatalogItem?: Array<GetUpdateItemsJobFieldsCatalogItemEnum>;
    include?: Array<GetUpdateItemsJobIncludeEnum>;
}

export interface GetUpdateItemsJobsRequest {
    revision: string;
    fieldsCatalogItemBulkUpdateJob?: Array<GetUpdateItemsJobsFieldsCatalogItemBulkUpdateJobEnum>;
    filter?: string;
    pageCursor?: string;
}

export interface GetUpdateVariantsJobRequest {
    jobId: string;
    revision: string;
    fieldsCatalogVariantBulkUpdateJob?: Array<GetUpdateVariantsJobFieldsCatalogVariantBulkUpdateJobEnum>;
    fieldsCatalogVariant?: Array<GetUpdateVariantsJobFieldsCatalogVariantEnum>;
    include?: Array<GetUpdateVariantsJobIncludeEnum>;
}

export interface GetUpdateVariantsJobsRequest {
    revision: string;
    fieldsCatalogVariantBulkUpdateJob?: Array<GetUpdateVariantsJobsFieldsCatalogVariantBulkUpdateJobEnum>;
    filter?: string;
    pageCursor?: string;
}

export interface SpawnCreateCategoriesJobRequest {
    revision: string;
    catalogCategoryCreateJobCreateQuery: CatalogCategoryCreateJobCreateQuery;
}

export interface SpawnCreateItemsJobRequest {
    revision: string;
    catalogItemCreateJobCreateQuery: CatalogItemCreateJobCreateQuery;
}

export interface SpawnCreateVariantsJobRequest {
    revision: string;
    catalogVariantCreateJobCreateQuery: CatalogVariantCreateJobCreateQuery;
}

export interface SpawnDeleteCategoriesJobRequest {
    revision: string;
    catalogCategoryDeleteJobCreateQuery: CatalogCategoryDeleteJobCreateQuery;
}

export interface SpawnDeleteItemsJobRequest {
    revision: string;
    catalogItemDeleteJobCreateQuery: CatalogItemDeleteJobCreateQuery;
}

export interface SpawnDeleteVariantsJobRequest {
    revision: string;
    catalogVariantDeleteJobCreateQuery: CatalogVariantDeleteJobCreateQuery;
}

export interface SpawnUpdateCategoriesJobRequest {
    revision: string;
    catalogCategoryUpdateJobCreateQuery: CatalogCategoryUpdateJobCreateQuery;
}

export interface SpawnUpdateItemsJobRequest {
    revision: string;
    catalogItemUpdateJobCreateQuery: CatalogItemUpdateJobCreateQuery;
}

export interface SpawnUpdateVariantsJobRequest {
    revision: string;
    catalogVariantUpdateJobCreateQuery: CatalogVariantUpdateJobCreateQuery;
}

export interface UpdateCatalogCategoryRequest {
    id: string;
    revision: string;
    catalogCategoryUpdateQuery: CatalogCategoryUpdateQuery;
}

export interface UpdateCatalogCategoryRelationshipsRequest {
    id: string;
    relatedResource: UpdateCatalogCategoryRelationshipsRelatedResourceEnum;
    revision: string;
    catalogCategoryItemOp: CatalogCategoryItemOp;
}

export interface UpdateCatalogItemRequest {
    id: string;
    revision: string;
    catalogItemUpdateQuery: CatalogItemUpdateQuery;
}

export interface UpdateCatalogItemRelationshipsRequest {
    id: string;
    relatedResource: UpdateCatalogItemRelationshipsRelatedResourceEnum;
    revision: string;
    catalogItemCategoryOp: CatalogItemCategoryOp;
}

export interface UpdateCatalogVariantRequest {
    id: string;
    revision: string;
    catalogVariantUpdateQuery: CatalogVariantUpdateQuery;
}

/**
 * 
 */
export class CatalogsApi extends runtime.BaseAPI {

    /**
     * Create a new catalog category.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `Catalogs Write`
     * Create Catalog Category
     */
    async createCatalogCategoryRaw(requestParameters: CreateCatalogCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostCatalogCategoryResponse>> {
        if (requestParameters.revision === null || requestParameters.revision === undefined) {
            throw new runtime.RequiredError('revision','Required parameter requestParameters.revision was null or undefined when calling createCatalogCategory.');
        }

        if (requestParameters.catalogCategoryCreateQuery === null || requestParameters.catalogCategoryCreateQuery === undefined) {
            throw new runtime.RequiredError('catalogCategoryCreateQuery','Required parameter requestParameters.catalogCategoryCreateQuery was null or undefined when calling createCatalogCategory.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.revision !== undefined && requestParameters.revision !== null) {
            headerParameters['revision'] = String(requestParameters.revision);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Klaviyo-API-Key authentication
        }

        const response = await this.request({
            path: `/api/catalog-categories/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CatalogCategoryCreateQueryToJSON(requestParameters.catalogCategoryCreateQuery),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostCatalogCategoryResponseFromJSON(jsonValue));
    }

    /**
     * Create a new catalog category.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `Catalogs Write`
     * Create Catalog Category
     */
    async createCatalogCategory(requestParameters: CreateCatalogCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostCatalogCategoryResponse> {
        const response = await this.createCatalogCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new item relationship for the given category ID.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `Catalogs Write`
     * Create Catalog Category Relationships
     */
    async createCatalogCategoryRelationshipsRaw(requestParameters: CreateCatalogCategoryRelationshipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling createCatalogCategoryRelationships.');
        }

        if (requestParameters.relatedResource === null || requestParameters.relatedResource === undefined) {
            throw new runtime.RequiredError('relatedResource','Required parameter requestParameters.relatedResource was null or undefined when calling createCatalogCategoryRelationships.');
        }

        if (requestParameters.revision === null || requestParameters.revision === undefined) {
            throw new runtime.RequiredError('revision','Required parameter requestParameters.revision was null or undefined when calling createCatalogCategoryRelationships.');
        }

        if (requestParameters.catalogCategoryItemOp === null || requestParameters.catalogCategoryItemOp === undefined) {
            throw new runtime.RequiredError('catalogCategoryItemOp','Required parameter requestParameters.catalogCategoryItemOp was null or undefined when calling createCatalogCategoryRelationships.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.revision !== undefined && requestParameters.revision !== null) {
            headerParameters['revision'] = String(requestParameters.revision);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Klaviyo-API-Key authentication
        }

        const response = await this.request({
            path: `/api/catalog-categories/{id}/relationships/{related_resource}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"related_resource"}}`, encodeURIComponent(String(requestParameters.relatedResource))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CatalogCategoryItemOpToJSON(requestParameters.catalogCategoryItemOp),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a new item relationship for the given category ID.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `Catalogs Write`
     * Create Catalog Category Relationships
     */
    async createCatalogCategoryRelationships(requestParameters: CreateCatalogCategoryRelationshipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createCatalogCategoryRelationshipsRaw(requestParameters, initOverrides);
    }

    /**
     * Create a new catalog item.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `Catalogs Write`
     * Create Catalog Item
     */
    async createCatalogItemRaw(requestParameters: CreateCatalogItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostCatalogItemResponse>> {
        if (requestParameters.revision === null || requestParameters.revision === undefined) {
            throw new runtime.RequiredError('revision','Required parameter requestParameters.revision was null or undefined when calling createCatalogItem.');
        }

        if (requestParameters.catalogItemCreateQuery === null || requestParameters.catalogItemCreateQuery === undefined) {
            throw new runtime.RequiredError('catalogItemCreateQuery','Required parameter requestParameters.catalogItemCreateQuery was null or undefined when calling createCatalogItem.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.revision !== undefined && requestParameters.revision !== null) {
            headerParameters['revision'] = String(requestParameters.revision);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Klaviyo-API-Key authentication
        }

        const response = await this.request({
            path: `/api/catalog-items/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CatalogItemCreateQueryToJSON(requestParameters.catalogItemCreateQuery),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostCatalogItemResponseFromJSON(jsonValue));
    }

    /**
     * Create a new catalog item.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `Catalogs Write`
     * Create Catalog Item
     */
    async createCatalogItem(requestParameters: CreateCatalogItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostCatalogItemResponse> {
        const response = await this.createCatalogItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new catalog category relationship for the given item ID.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `Catalogs Write`
     * Create Catalog Item Relationships
     */
    async createCatalogItemRelationshipsRaw(requestParameters: CreateCatalogItemRelationshipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling createCatalogItemRelationships.');
        }

        if (requestParameters.relatedResource === null || requestParameters.relatedResource === undefined) {
            throw new runtime.RequiredError('relatedResource','Required parameter requestParameters.relatedResource was null or undefined when calling createCatalogItemRelationships.');
        }

        if (requestParameters.revision === null || requestParameters.revision === undefined) {
            throw new runtime.RequiredError('revision','Required parameter requestParameters.revision was null or undefined when calling createCatalogItemRelationships.');
        }

        if (requestParameters.catalogItemCategoryOp === null || requestParameters.catalogItemCategoryOp === undefined) {
            throw new runtime.RequiredError('catalogItemCategoryOp','Required parameter requestParameters.catalogItemCategoryOp was null or undefined when calling createCatalogItemRelationships.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.revision !== undefined && requestParameters.revision !== null) {
            headerParameters['revision'] = String(requestParameters.revision);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Klaviyo-API-Key authentication
        }

        const response = await this.request({
            path: `/api/catalog-items/{id}/relationships/{related_resource}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"related_resource"}}`, encodeURIComponent(String(requestParameters.relatedResource))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CatalogItemCategoryOpToJSON(requestParameters.catalogItemCategoryOp),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a new catalog category relationship for the given item ID.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `Catalogs Write`
     * Create Catalog Item Relationships
     */
    async createCatalogItemRelationships(requestParameters: CreateCatalogItemRelationshipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createCatalogItemRelationshipsRaw(requestParameters, initOverrides);
    }

    /**
     * Create a new variant for a related catalog item.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `Catalogs Write`
     * Create Catalog Variant
     */
    async createCatalogVariantRaw(requestParameters: CreateCatalogVariantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostCatalogVariantResponse>> {
        if (requestParameters.revision === null || requestParameters.revision === undefined) {
            throw new runtime.RequiredError('revision','Required parameter requestParameters.revision was null or undefined when calling createCatalogVariant.');
        }

        if (requestParameters.catalogVariantCreateQuery === null || requestParameters.catalogVariantCreateQuery === undefined) {
            throw new runtime.RequiredError('catalogVariantCreateQuery','Required parameter requestParameters.catalogVariantCreateQuery was null or undefined when calling createCatalogVariant.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.revision !== undefined && requestParameters.revision !== null) {
            headerParameters['revision'] = String(requestParameters.revision);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Klaviyo-API-Key authentication
        }

        const response = await this.request({
            path: `/api/catalog-variants/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CatalogVariantCreateQueryToJSON(requestParameters.catalogVariantCreateQuery),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostCatalogVariantResponseFromJSON(jsonValue));
    }

    /**
     * Create a new variant for a related catalog item.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `Catalogs Write`
     * Create Catalog Variant
     */
    async createCatalogVariant(requestParameters: CreateCatalogVariantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostCatalogVariantResponse> {
        const response = await this.createCatalogVariantRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a catalog category using the given category ID.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `Catalogs Write`
     * Delete Catalog Category
     */
    async deleteCatalogCategoryRaw(requestParameters: DeleteCatalogCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteCatalogCategory.');
        }

        if (requestParameters.revision === null || requestParameters.revision === undefined) {
            throw new runtime.RequiredError('revision','Required parameter requestParameters.revision was null or undefined when calling deleteCatalogCategory.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.revision !== undefined && requestParameters.revision !== null) {
            headerParameters['revision'] = String(requestParameters.revision);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Klaviyo-API-Key authentication
        }

        const response = await this.request({
            path: `/api/catalog-categories/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a catalog category using the given category ID.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `Catalogs Write`
     * Delete Catalog Category
     */
    async deleteCatalogCategory(requestParameters: DeleteCatalogCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCatalogCategoryRaw(requestParameters, initOverrides);
    }

    /**
     * Delete item relationships for the given category ID.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `Catalogs Write`
     * Delete Catalog Category Relationships
     */
    async deleteCatalogCategoryRelationshipsRaw(requestParameters: DeleteCatalogCategoryRelationshipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteCatalogCategoryRelationships.');
        }

        if (requestParameters.relatedResource === null || requestParameters.relatedResource === undefined) {
            throw new runtime.RequiredError('relatedResource','Required parameter requestParameters.relatedResource was null or undefined when calling deleteCatalogCategoryRelationships.');
        }

        if (requestParameters.revision === null || requestParameters.revision === undefined) {
            throw new runtime.RequiredError('revision','Required parameter requestParameters.revision was null or undefined when calling deleteCatalogCategoryRelationships.');
        }

        if (requestParameters.catalogCategoryItemOp === null || requestParameters.catalogCategoryItemOp === undefined) {
            throw new runtime.RequiredError('catalogCategoryItemOp','Required parameter requestParameters.catalogCategoryItemOp was null or undefined when calling deleteCatalogCategoryRelationships.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.revision !== undefined && requestParameters.revision !== null) {
            headerParameters['revision'] = String(requestParameters.revision);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Klaviyo-API-Key authentication
        }

        const response = await this.request({
            path: `/api/catalog-categories/{id}/relationships/{related_resource}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"related_resource"}}`, encodeURIComponent(String(requestParameters.relatedResource))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: CatalogCategoryItemOpToJSON(requestParameters.catalogCategoryItemOp),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete item relationships for the given category ID.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `Catalogs Write`
     * Delete Catalog Category Relationships
     */
    async deleteCatalogCategoryRelationships(requestParameters: DeleteCatalogCategoryRelationshipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCatalogCategoryRelationshipsRaw(requestParameters, initOverrides);
    }

    /**
     * Delete a catalog item with the given item ID.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `Catalogs Write`
     * Delete Catalog Item
     */
    async deleteCatalogItemRaw(requestParameters: DeleteCatalogItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteCatalogItem.');
        }

        if (requestParameters.revision === null || requestParameters.revision === undefined) {
            throw new runtime.RequiredError('revision','Required parameter requestParameters.revision was null or undefined when calling deleteCatalogItem.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.revision !== undefined && requestParameters.revision !== null) {
            headerParameters['revision'] = String(requestParameters.revision);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Klaviyo-API-Key authentication
        }

        const response = await this.request({
            path: `/api/catalog-items/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a catalog item with the given item ID.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `Catalogs Write`
     * Delete Catalog Item
     */
    async deleteCatalogItem(requestParameters: DeleteCatalogItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCatalogItemRaw(requestParameters, initOverrides);
    }

    /**
     * Delete catalog category relationships for the given item ID.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `Catalogs Write`
     * Delete Catalog Item Relationships
     */
    async deleteCatalogItemRelationshipsRaw(requestParameters: DeleteCatalogItemRelationshipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteCatalogItemRelationships.');
        }

        if (requestParameters.relatedResource === null || requestParameters.relatedResource === undefined) {
            throw new runtime.RequiredError('relatedResource','Required parameter requestParameters.relatedResource was null or undefined when calling deleteCatalogItemRelationships.');
        }

        if (requestParameters.revision === null || requestParameters.revision === undefined) {
            throw new runtime.RequiredError('revision','Required parameter requestParameters.revision was null or undefined when calling deleteCatalogItemRelationships.');
        }

        if (requestParameters.catalogItemCategoryOp === null || requestParameters.catalogItemCategoryOp === undefined) {
            throw new runtime.RequiredError('catalogItemCategoryOp','Required parameter requestParameters.catalogItemCategoryOp was null or undefined when calling deleteCatalogItemRelationships.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.revision !== undefined && requestParameters.revision !== null) {
            headerParameters['revision'] = String(requestParameters.revision);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Klaviyo-API-Key authentication
        }

        const response = await this.request({
            path: `/api/catalog-items/{id}/relationships/{related_resource}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"related_resource"}}`, encodeURIComponent(String(requestParameters.relatedResource))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: CatalogItemCategoryOpToJSON(requestParameters.catalogItemCategoryOp),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete catalog category relationships for the given item ID.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `Catalogs Write`
     * Delete Catalog Item Relationships
     */
    async deleteCatalogItemRelationships(requestParameters: DeleteCatalogItemRelationshipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCatalogItemRelationshipsRaw(requestParameters, initOverrides);
    }

    /**
     * Delete a catalog item variant with the given variant ID.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `Catalogs Write`
     * Delete Catalog Variant
     */
    async deleteCatalogVariantRaw(requestParameters: DeleteCatalogVariantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteCatalogVariant.');
        }

        if (requestParameters.revision === null || requestParameters.revision === undefined) {
            throw new runtime.RequiredError('revision','Required parameter requestParameters.revision was null or undefined when calling deleteCatalogVariant.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.revision !== undefined && requestParameters.revision !== null) {
            headerParameters['revision'] = String(requestParameters.revision);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Klaviyo-API-Key authentication
        }

        const response = await this.request({
            path: `/api/catalog-variants/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a catalog item variant with the given variant ID.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `Catalogs Write`
     * Delete Catalog Variant
     */
    async deleteCatalogVariant(requestParameters: DeleteCatalogVariantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCatalogVariantRaw(requestParameters, initOverrides);
    }

    /**
     * Get all catalog categories in an account. Catalog categories can be sorted by the following fields, in ascending and descending order: `created` Use filters to return specific fields. Request specific fields [sparse fieldsets](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#sparse-fieldsets). Returns a maximum of 100 categories per request, which can be paginated with [cursor-based pagination](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#pagination).<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `Catalogs Read`
     * Get Catalog Categories
     */
    async getCatalogCategoriesRaw(requestParameters: GetCatalogCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCatalogCategoryResponseCollection>> {
        if (requestParameters.revision === null || requestParameters.revision === undefined) {
            throw new runtime.RequiredError('revision','Required parameter requestParameters.revision was null or undefined when calling getCatalogCategories.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsCatalogCategory) {
            queryParameters['fields[catalog-category]'] = requestParameters.fieldsCatalogCategory.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.pageCursor !== undefined) {
            queryParameters['page[cursor]'] = requestParameters.pageCursor;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.revision !== undefined && requestParameters.revision !== null) {
            headerParameters['revision'] = String(requestParameters.revision);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Klaviyo-API-Key authentication
        }

        const response = await this.request({
            path: `/api/catalog-categories/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCatalogCategoryResponseCollectionFromJSON(jsonValue));
    }

    /**
     * Get all catalog categories in an account. Catalog categories can be sorted by the following fields, in ascending and descending order: `created` Use filters to return specific fields. Request specific fields [sparse fieldsets](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#sparse-fieldsets). Returns a maximum of 100 categories per request, which can be paginated with [cursor-based pagination](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#pagination).<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `Catalogs Read`
     * Get Catalog Categories
     */
    async getCatalogCategories(requestParameters: GetCatalogCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCatalogCategoryResponseCollection> {
        const response = await this.getCatalogCategoriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a catalog category with the given category ID.<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `Catalogs Read`
     * Get Catalog Category
     */
    async getCatalogCategoryRaw(requestParameters: GetCatalogCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCatalogCategoryResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCatalogCategory.');
        }

        if (requestParameters.revision === null || requestParameters.revision === undefined) {
            throw new runtime.RequiredError('revision','Required parameter requestParameters.revision was null or undefined when calling getCatalogCategory.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsCatalogCategory) {
            queryParameters['fields[catalog-category]'] = requestParameters.fieldsCatalogCategory.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.revision !== undefined && requestParameters.revision !== null) {
            headerParameters['revision'] = String(requestParameters.revision);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Klaviyo-API-Key authentication
        }

        const response = await this.request({
            path: `/api/catalog-categories/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCatalogCategoryResponseFromJSON(jsonValue));
    }

    /**
     * Get a catalog category with the given category ID.<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `Catalogs Read`
     * Get Catalog Category
     */
    async getCatalogCategory(requestParameters: GetCatalogCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCatalogCategoryResponse> {
        const response = await this.getCatalogCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all items in a category with the given category ID. Items can be sorted by the following fields, in ascending and descending order: `created` Use filters to return specific fields and any variants. Request specific fields using [sparse fieldsets](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#sparse-fieldsets). Include parameters can be provided to get the following related resource data: `variants` Returns a maximum of 100 items per request, which can be paginated with [cursor-based pagination](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#pagination).<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `Catalogs Read`
     * Get Catalog Category Items
     */
    async getCatalogCategoryItemsRaw(requestParameters: GetCatalogCategoryItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCatalogItemResponseCollectionWithIncludedSection>> {
        if (requestParameters.categoryId === null || requestParameters.categoryId === undefined) {
            throw new runtime.RequiredError('categoryId','Required parameter requestParameters.categoryId was null or undefined when calling getCatalogCategoryItems.');
        }

        if (requestParameters.revision === null || requestParameters.revision === undefined) {
            throw new runtime.RequiredError('revision','Required parameter requestParameters.revision was null or undefined when calling getCatalogCategoryItems.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsCatalogItem) {
            queryParameters['fields[catalog-item]'] = requestParameters.fieldsCatalogItem.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsCatalogVariant) {
            queryParameters['fields[catalog-variant]'] = requestParameters.fieldsCatalogVariant.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include;
        }

        if (requestParameters.pageCursor !== undefined) {
            queryParameters['page[cursor]'] = requestParameters.pageCursor;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.revision !== undefined && requestParameters.revision !== null) {
            headerParameters['revision'] = String(requestParameters.revision);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Klaviyo-API-Key authentication
        }

        const response = await this.request({
            path: `/api/catalog-categories/{category_id}/items/`.replace(`{${"category_id"}}`, encodeURIComponent(String(requestParameters.categoryId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCatalogItemResponseCollectionWithIncludedSectionFromJSON(jsonValue));
    }

    /**
     * Get all items in a category with the given category ID. Items can be sorted by the following fields, in ascending and descending order: `created` Use filters to return specific fields and any variants. Request specific fields using [sparse fieldsets](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#sparse-fieldsets). Include parameters can be provided to get the following related resource data: `variants` Returns a maximum of 100 items per request, which can be paginated with [cursor-based pagination](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#pagination).<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `Catalogs Read`
     * Get Catalog Category Items
     */
    async getCatalogCategoryItems(requestParameters: GetCatalogCategoryItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCatalogItemResponseCollectionWithIncludedSection> {
        const response = await this.getCatalogCategoryItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all items in the given category ID. Returns a maximum of 100 items per request, which can be paginated with [cursor-based pagination](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#pagination).<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `Catalogs Read`
     * Get Catalog Category Relationships
     */
    async getCatalogCategoryRelationshipsRaw(requestParameters: GetCatalogCategoryRelationshipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCatalogCategoryItemListResponseCollection>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCatalogCategoryRelationships.');
        }

        if (requestParameters.relatedResource === null || requestParameters.relatedResource === undefined) {
            throw new runtime.RequiredError('relatedResource','Required parameter requestParameters.relatedResource was null or undefined when calling getCatalogCategoryRelationships.');
        }

        if (requestParameters.revision === null || requestParameters.revision === undefined) {
            throw new runtime.RequiredError('revision','Required parameter requestParameters.revision was null or undefined when calling getCatalogCategoryRelationships.');
        }

        const queryParameters: any = {};

        if (requestParameters.pageCursor !== undefined) {
            queryParameters['page[cursor]'] = requestParameters.pageCursor;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.revision !== undefined && requestParameters.revision !== null) {
            headerParameters['revision'] = String(requestParameters.revision);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Klaviyo-API-Key authentication
        }

        const response = await this.request({
            path: `/api/catalog-categories/{id}/relationships/{related_resource}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"related_resource"}}`, encodeURIComponent(String(requestParameters.relatedResource))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCatalogCategoryItemListResponseCollectionFromJSON(jsonValue));
    }

    /**
     * Get all items in the given category ID. Returns a maximum of 100 items per request, which can be paginated with [cursor-based pagination](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#pagination).<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `Catalogs Read`
     * Get Catalog Category Relationships
     */
    async getCatalogCategoryRelationships(requestParameters: GetCatalogCategoryRelationshipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCatalogCategoryItemListResponseCollection> {
        const response = await this.getCatalogCategoryRelationshipsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a specific catalog item with the given item ID. Request specific fields and variants using [sparse fieldsets](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#sparse-fieldsets). Include parameters can be provided to get the following related resource data: `variants`<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `Catalogs Read`
     * Get Catalog Item
     */
    async getCatalogItemRaw(requestParameters: GetCatalogItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCatalogItemResponseWithIncludedSection>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCatalogItem.');
        }

        if (requestParameters.revision === null || requestParameters.revision === undefined) {
            throw new runtime.RequiredError('revision','Required parameter requestParameters.revision was null or undefined when calling getCatalogItem.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsCatalogItem) {
            queryParameters['fields[catalog-item]'] = requestParameters.fieldsCatalogItem.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsCatalogVariant) {
            queryParameters['fields[catalog-variant]'] = requestParameters.fieldsCatalogVariant.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.revision !== undefined && requestParameters.revision !== null) {
            headerParameters['revision'] = String(requestParameters.revision);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Klaviyo-API-Key authentication
        }

        const response = await this.request({
            path: `/api/catalog-items/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCatalogItemResponseWithIncludedSectionFromJSON(jsonValue));
    }

    /**
     * Get a specific catalog item with the given item ID. Request specific fields and variants using [sparse fieldsets](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#sparse-fieldsets). Include parameters can be provided to get the following related resource data: `variants`<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `Catalogs Read`
     * Get Catalog Item
     */
    async getCatalogItem(requestParameters: GetCatalogItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCatalogItemResponseWithIncludedSection> {
        const response = await this.getCatalogItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all catalog categories that an item with the given item ID is in. Catalog categories can be sorted by the following fields, in ascending and descending order: `created` Use filters to return specific fields. Request specific fields [sparse fieldsets](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#sparse-fieldsets). Returns a maximum of 100 categories per request, which can be paginated with [cursor-based pagination](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#pagination).<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `Catalogs Read`
     * Get Catalog Item Categories
     */
    async getCatalogItemCategoriesRaw(requestParameters: GetCatalogItemCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCatalogCategoryResponseCollection>> {
        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling getCatalogItemCategories.');
        }

        if (requestParameters.revision === null || requestParameters.revision === undefined) {
            throw new runtime.RequiredError('revision','Required parameter requestParameters.revision was null or undefined when calling getCatalogItemCategories.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsCatalogCategory) {
            queryParameters['fields[catalog-category]'] = requestParameters.fieldsCatalogCategory.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.pageCursor !== undefined) {
            queryParameters['page[cursor]'] = requestParameters.pageCursor;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.revision !== undefined && requestParameters.revision !== null) {
            headerParameters['revision'] = String(requestParameters.revision);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Klaviyo-API-Key authentication
        }

        const response = await this.request({
            path: `/api/catalog-items/{item_id}/categories/`.replace(`{${"item_id"}}`, encodeURIComponent(String(requestParameters.itemId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCatalogCategoryResponseCollectionFromJSON(jsonValue));
    }

    /**
     * Get all catalog categories that an item with the given item ID is in. Catalog categories can be sorted by the following fields, in ascending and descending order: `created` Use filters to return specific fields. Request specific fields [sparse fieldsets](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#sparse-fieldsets). Returns a maximum of 100 categories per request, which can be paginated with [cursor-based pagination](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#pagination).<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `Catalogs Read`
     * Get Catalog Item Categories
     */
    async getCatalogItemCategories(requestParameters: GetCatalogItemCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCatalogCategoryResponseCollection> {
        const response = await this.getCatalogItemCategoriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all catalog categories that a particular item is in. Returns a maximum of 100 categories per request, which can be paginated with [cursor-based pagination](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#pagination).<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `Catalogs Read`
     * Get Catalog Item Relationships
     */
    async getCatalogItemRelationshipsRaw(requestParameters: GetCatalogItemRelationshipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCatalogItemCategoryListResponseCollection>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCatalogItemRelationships.');
        }

        if (requestParameters.relatedResource === null || requestParameters.relatedResource === undefined) {
            throw new runtime.RequiredError('relatedResource','Required parameter requestParameters.relatedResource was null or undefined when calling getCatalogItemRelationships.');
        }

        if (requestParameters.revision === null || requestParameters.revision === undefined) {
            throw new runtime.RequiredError('revision','Required parameter requestParameters.revision was null or undefined when calling getCatalogItemRelationships.');
        }

        const queryParameters: any = {};

        if (requestParameters.pageCursor !== undefined) {
            queryParameters['page[cursor]'] = requestParameters.pageCursor;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.revision !== undefined && requestParameters.revision !== null) {
            headerParameters['revision'] = String(requestParameters.revision);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Klaviyo-API-Key authentication
        }

        const response = await this.request({
            path: `/api/catalog-items/{id}/relationships/{related_resource}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"related_resource"}}`, encodeURIComponent(String(requestParameters.relatedResource))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCatalogItemCategoryListResponseCollectionFromJSON(jsonValue));
    }

    /**
     * Get all catalog categories that a particular item is in. Returns a maximum of 100 categories per request, which can be paginated with [cursor-based pagination](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#pagination).<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `Catalogs Read`
     * Get Catalog Item Relationships
     */
    async getCatalogItemRelationships(requestParameters: GetCatalogItemRelationshipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCatalogItemCategoryListResponseCollection> {
        const response = await this.getCatalogItemRelationshipsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all variants related to the given item ID. Use filters to return specific fields. Request specific fields [sparse fieldsets](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#sparse-fieldsets). Variants can be sorted by the following fields, in ascending and descending order: `created` Returns a maximum of 100 variants per request, which can be paginated with [cursor-based pagination](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#pagination).<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `Catalogs Read`
     * Get Catalog Item Variants
     */
    async getCatalogItemVariantsRaw(requestParameters: GetCatalogItemVariantsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCatalogVariantResponseCollection>> {
        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling getCatalogItemVariants.');
        }

        if (requestParameters.revision === null || requestParameters.revision === undefined) {
            throw new runtime.RequiredError('revision','Required parameter requestParameters.revision was null or undefined when calling getCatalogItemVariants.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsCatalogVariant) {
            queryParameters['fields[catalog-variant]'] = requestParameters.fieldsCatalogVariant.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.pageCursor !== undefined) {
            queryParameters['page[cursor]'] = requestParameters.pageCursor;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.revision !== undefined && requestParameters.revision !== null) {
            headerParameters['revision'] = String(requestParameters.revision);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Klaviyo-API-Key authentication
        }

        const response = await this.request({
            path: `/api/catalog-items/{item_id}/variants/`.replace(`{${"item_id"}}`, encodeURIComponent(String(requestParameters.itemId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCatalogVariantResponseCollectionFromJSON(jsonValue));
    }

    /**
     * Get all variants related to the given item ID. Use filters to return specific fields. Request specific fields [sparse fieldsets](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#sparse-fieldsets). Variants can be sorted by the following fields, in ascending and descending order: `created` Returns a maximum of 100 variants per request, which can be paginated with [cursor-based pagination](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#pagination).<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `Catalogs Read`
     * Get Catalog Item Variants
     */
    async getCatalogItemVariants(requestParameters: GetCatalogItemVariantsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCatalogVariantResponseCollection> {
        const response = await this.getCatalogItemVariantsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all catalog items in an account. Catalog items can be sorted by the following fields, in ascending and descending order: `created` Use filters to return specific fields and any variants. Request specific fields using [sparse fieldsets](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#sparse-fieldsets). Include parameters can be provided to get the following related resource data: `variants` Returns a maximum of 100 items per request, which can be paginated with [cursor-based pagination](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#pagination).<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `Catalogs Read`
     * Get Catalog Items
     */
    async getCatalogItemsRaw(requestParameters: GetCatalogItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCatalogItemResponseCollectionWithIncludedSection>> {
        if (requestParameters.revision === null || requestParameters.revision === undefined) {
            throw new runtime.RequiredError('revision','Required parameter requestParameters.revision was null or undefined when calling getCatalogItems.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsCatalogItem) {
            queryParameters['fields[catalog-item]'] = requestParameters.fieldsCatalogItem.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsCatalogVariant) {
            queryParameters['fields[catalog-variant]'] = requestParameters.fieldsCatalogVariant.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include;
        }

        if (requestParameters.pageCursor !== undefined) {
            queryParameters['page[cursor]'] = requestParameters.pageCursor;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.revision !== undefined && requestParameters.revision !== null) {
            headerParameters['revision'] = String(requestParameters.revision);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Klaviyo-API-Key authentication
        }

        const response = await this.request({
            path: `/api/catalog-items/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCatalogItemResponseCollectionWithIncludedSectionFromJSON(jsonValue));
    }

    /**
     * Get all catalog items in an account. Catalog items can be sorted by the following fields, in ascending and descending order: `created` Use filters to return specific fields and any variants. Request specific fields using [sparse fieldsets](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#sparse-fieldsets). Include parameters can be provided to get the following related resource data: `variants` Returns a maximum of 100 items per request, which can be paginated with [cursor-based pagination](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#pagination).<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `Catalogs Read`
     * Get Catalog Items
     */
    async getCatalogItems(requestParameters: GetCatalogItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCatalogItemResponseCollectionWithIncludedSection> {
        const response = await this.getCatalogItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a catalog item variant with the given variant ID.<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `Catalogs Read`
     * Get Catalog Variant
     */
    async getCatalogVariantRaw(requestParameters: GetCatalogVariantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCatalogVariantResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCatalogVariant.');
        }

        if (requestParameters.revision === null || requestParameters.revision === undefined) {
            throw new runtime.RequiredError('revision','Required parameter requestParameters.revision was null or undefined when calling getCatalogVariant.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsCatalogVariant) {
            queryParameters['fields[catalog-variant]'] = requestParameters.fieldsCatalogVariant.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.revision !== undefined && requestParameters.revision !== null) {
            headerParameters['revision'] = String(requestParameters.revision);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Klaviyo-API-Key authentication
        }

        const response = await this.request({
            path: `/api/catalog-variants/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCatalogVariantResponseFromJSON(jsonValue));
    }

    /**
     * Get a catalog item variant with the given variant ID.<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `Catalogs Read`
     * Get Catalog Variant
     */
    async getCatalogVariant(requestParameters: GetCatalogVariantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCatalogVariantResponse> {
        const response = await this.getCatalogVariantRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all variants in an account. Use filters to return specific fields. Request specific fields [sparse fieldsets](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#sparse-fieldsets). Variants can be sorted by the following fields, in ascending and descending order: `created` Returns a maximum of 100 variants per request, which can be paginated with [cursor-based pagination](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#pagination).<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `Catalogs Read`
     * Get Catalog Variants
     */
    async getCatalogVariantsRaw(requestParameters: GetCatalogVariantsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCatalogVariantResponseCollection>> {
        if (requestParameters.revision === null || requestParameters.revision === undefined) {
            throw new runtime.RequiredError('revision','Required parameter requestParameters.revision was null or undefined when calling getCatalogVariants.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsCatalogVariant) {
            queryParameters['fields[catalog-variant]'] = requestParameters.fieldsCatalogVariant.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.pageCursor !== undefined) {
            queryParameters['page[cursor]'] = requestParameters.pageCursor;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.revision !== undefined && requestParameters.revision !== null) {
            headerParameters['revision'] = String(requestParameters.revision);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Klaviyo-API-Key authentication
        }

        const response = await this.request({
            path: `/api/catalog-variants/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCatalogVariantResponseCollectionFromJSON(jsonValue));
    }

    /**
     * Get all variants in an account. Use filters to return specific fields. Request specific fields [sparse fieldsets](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#sparse-fieldsets). Variants can be sorted by the following fields, in ascending and descending order: `created` Returns a maximum of 100 variants per request, which can be paginated with [cursor-based pagination](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#pagination).<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `Catalogs Read`
     * Get Catalog Variants
     */
    async getCatalogVariants(requestParameters: GetCatalogVariantsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCatalogVariantResponseCollection> {
        const response = await this.getCatalogVariantsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a catalog category bulk create job with the given job ID. Include parameters can be provided to get the following related resource data: `categories`<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `Catalogs Read`
     * Get Create Categories Job
     */
    async getCreateCategoriesJobRaw(requestParameters: GetCreateCategoriesJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCatalogCategoryCreateJobResponseWithIncludedSection>> {
        if (requestParameters.jobId === null || requestParameters.jobId === undefined) {
            throw new runtime.RequiredError('jobId','Required parameter requestParameters.jobId was null or undefined when calling getCreateCategoriesJob.');
        }

        if (requestParameters.revision === null || requestParameters.revision === undefined) {
            throw new runtime.RequiredError('revision','Required parameter requestParameters.revision was null or undefined when calling getCreateCategoriesJob.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsCatalogCategoryBulkCreateJob) {
            queryParameters['fields[catalog-category-bulk-create-job]'] = requestParameters.fieldsCatalogCategoryBulkCreateJob.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsCatalogCategory) {
            queryParameters['fields[catalog-category]'] = requestParameters.fieldsCatalogCategory.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.revision !== undefined && requestParameters.revision !== null) {
            headerParameters['revision'] = String(requestParameters.revision);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Klaviyo-API-Key authentication
        }

        const response = await this.request({
            path: `/api/catalog-category-bulk-create-jobs/{job_id}/`.replace(`{${"job_id"}}`, encodeURIComponent(String(requestParameters.jobId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCatalogCategoryCreateJobResponseWithIncludedSectionFromJSON(jsonValue));
    }

    /**
     * Get a catalog category bulk create job with the given job ID. Include parameters can be provided to get the following related resource data: `categories`<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `Catalogs Read`
     * Get Create Categories Job
     */
    async getCreateCategoriesJob(requestParameters: GetCreateCategoriesJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCatalogCategoryCreateJobResponseWithIncludedSection> {
        const response = await this.getCreateCategoriesJobRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all catalog category bulk create jobs. Returns a maximum of 100 jobs per request, which can be paginated with [cursor-based pagination](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#pagination).<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `Catalogs Read`
     * Get Create Categories Jobs
     */
    async getCreateCategoriesJobsRaw(requestParameters: GetCreateCategoriesJobsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCatalogCategoryCreateJobResponseCollectionWithIncludedSection>> {
        if (requestParameters.revision === null || requestParameters.revision === undefined) {
            throw new runtime.RequiredError('revision','Required parameter requestParameters.revision was null or undefined when calling getCreateCategoriesJobs.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsCatalogCategoryBulkCreateJob) {
            queryParameters['fields[catalog-category-bulk-create-job]'] = requestParameters.fieldsCatalogCategoryBulkCreateJob.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.pageCursor !== undefined) {
            queryParameters['page[cursor]'] = requestParameters.pageCursor;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.revision !== undefined && requestParameters.revision !== null) {
            headerParameters['revision'] = String(requestParameters.revision);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Klaviyo-API-Key authentication
        }

        const response = await this.request({
            path: `/api/catalog-category-bulk-create-jobs/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCatalogCategoryCreateJobResponseCollectionWithIncludedSectionFromJSON(jsonValue));
    }

    /**
     * Get all catalog category bulk create jobs. Returns a maximum of 100 jobs per request, which can be paginated with [cursor-based pagination](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#pagination).<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `Catalogs Read`
     * Get Create Categories Jobs
     */
    async getCreateCategoriesJobs(requestParameters: GetCreateCategoriesJobsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCatalogCategoryCreateJobResponseCollectionWithIncludedSection> {
        const response = await this.getCreateCategoriesJobsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a catalog item bulk create job with the given job ID. Include parameters can be provided to get the following related resource data: `items`<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `Catalogs Read`
     * Get Create Items Job
     */
    async getCreateItemsJobRaw(requestParameters: GetCreateItemsJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCatalogItemCreateJobResponseWithIncludedSection>> {
        if (requestParameters.jobId === null || requestParameters.jobId === undefined) {
            throw new runtime.RequiredError('jobId','Required parameter requestParameters.jobId was null or undefined when calling getCreateItemsJob.');
        }

        if (requestParameters.revision === null || requestParameters.revision === undefined) {
            throw new runtime.RequiredError('revision','Required parameter requestParameters.revision was null or undefined when calling getCreateItemsJob.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsCatalogItemBulkCreateJob) {
            queryParameters['fields[catalog-item-bulk-create-job]'] = requestParameters.fieldsCatalogItemBulkCreateJob.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsCatalogItem) {
            queryParameters['fields[catalog-item]'] = requestParameters.fieldsCatalogItem.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.revision !== undefined && requestParameters.revision !== null) {
            headerParameters['revision'] = String(requestParameters.revision);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Klaviyo-API-Key authentication
        }

        const response = await this.request({
            path: `/api/catalog-item-bulk-create-jobs/{job_id}/`.replace(`{${"job_id"}}`, encodeURIComponent(String(requestParameters.jobId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCatalogItemCreateJobResponseWithIncludedSectionFromJSON(jsonValue));
    }

    /**
     * Get a catalog item bulk create job with the given job ID. Include parameters can be provided to get the following related resource data: `items`<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `Catalogs Read`
     * Get Create Items Job
     */
    async getCreateItemsJob(requestParameters: GetCreateItemsJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCatalogItemCreateJobResponseWithIncludedSection> {
        const response = await this.getCreateItemsJobRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all catalog item bulk create jobs. Returns a maximum of 100 jobs per request, which can be paginated with [cursor-based pagination](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#pagination).<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `Catalogs Read`
     * Get Create Items Jobs
     */
    async getCreateItemsJobsRaw(requestParameters: GetCreateItemsJobsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCatalogItemCreateJobResponseCollectionWithIncludedSection>> {
        if (requestParameters.revision === null || requestParameters.revision === undefined) {
            throw new runtime.RequiredError('revision','Required parameter requestParameters.revision was null or undefined when calling getCreateItemsJobs.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsCatalogItemBulkCreateJob) {
            queryParameters['fields[catalog-item-bulk-create-job]'] = requestParameters.fieldsCatalogItemBulkCreateJob.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.pageCursor !== undefined) {
            queryParameters['page[cursor]'] = requestParameters.pageCursor;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.revision !== undefined && requestParameters.revision !== null) {
            headerParameters['revision'] = String(requestParameters.revision);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Klaviyo-API-Key authentication
        }

        const response = await this.request({
            path: `/api/catalog-item-bulk-create-jobs/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCatalogItemCreateJobResponseCollectionWithIncludedSectionFromJSON(jsonValue));
    }

    /**
     * Get all catalog item bulk create jobs. Returns a maximum of 100 jobs per request, which can be paginated with [cursor-based pagination](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#pagination).<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `Catalogs Read`
     * Get Create Items Jobs
     */
    async getCreateItemsJobs(requestParameters: GetCreateItemsJobsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCatalogItemCreateJobResponseCollectionWithIncludedSection> {
        const response = await this.getCreateItemsJobsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a catalog variant bulk create job with the given job ID. Include parameters can be provided to get the following related resource data: `variants`.<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `Catalogs Read`
     * Get Create Variants Job
     */
    async getCreateVariantsJobRaw(requestParameters: GetCreateVariantsJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCatalogVariantCreateJobResponseWithIncludedSection>> {
        if (requestParameters.jobId === null || requestParameters.jobId === undefined) {
            throw new runtime.RequiredError('jobId','Required parameter requestParameters.jobId was null or undefined when calling getCreateVariantsJob.');
        }

        if (requestParameters.revision === null || requestParameters.revision === undefined) {
            throw new runtime.RequiredError('revision','Required parameter requestParameters.revision was null or undefined when calling getCreateVariantsJob.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsCatalogVariantBulkCreateJob) {
            queryParameters['fields[catalog-variant-bulk-create-job]'] = requestParameters.fieldsCatalogVariantBulkCreateJob.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsCatalogVariant) {
            queryParameters['fields[catalog-variant]'] = requestParameters.fieldsCatalogVariant.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.revision !== undefined && requestParameters.revision !== null) {
            headerParameters['revision'] = String(requestParameters.revision);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Klaviyo-API-Key authentication
        }

        const response = await this.request({
            path: `/api/catalog-variant-bulk-create-jobs/{job_id}/`.replace(`{${"job_id"}}`, encodeURIComponent(String(requestParameters.jobId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCatalogVariantCreateJobResponseWithIncludedSectionFromJSON(jsonValue));
    }

    /**
     * Get a catalog variant bulk create job with the given job ID. Include parameters can be provided to get the following related resource data: `variants`.<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `Catalogs Read`
     * Get Create Variants Job
     */
    async getCreateVariantsJob(requestParameters: GetCreateVariantsJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCatalogVariantCreateJobResponseWithIncludedSection> {
        const response = await this.getCreateVariantsJobRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all catalog variant bulk create jobs. Returns a maximum of 100 jobs per request, which can be paginated with [cursor-based pagination](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#pagination).<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `Catalogs Read`
     * Get Create Variants Jobs
     */
    async getCreateVariantsJobsRaw(requestParameters: GetCreateVariantsJobsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCatalogVariantCreateJobResponseCollectionWithIncludedSection>> {
        if (requestParameters.revision === null || requestParameters.revision === undefined) {
            throw new runtime.RequiredError('revision','Required parameter requestParameters.revision was null or undefined when calling getCreateVariantsJobs.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsCatalogVariantBulkCreateJob) {
            queryParameters['fields[catalog-variant-bulk-create-job]'] = requestParameters.fieldsCatalogVariantBulkCreateJob.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.pageCursor !== undefined) {
            queryParameters['page[cursor]'] = requestParameters.pageCursor;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.revision !== undefined && requestParameters.revision !== null) {
            headerParameters['revision'] = String(requestParameters.revision);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Klaviyo-API-Key authentication
        }

        const response = await this.request({
            path: `/api/catalog-variant-bulk-create-jobs/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCatalogVariantCreateJobResponseCollectionWithIncludedSectionFromJSON(jsonValue));
    }

    /**
     * Get all catalog variant bulk create jobs. Returns a maximum of 100 jobs per request, which can be paginated with [cursor-based pagination](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#pagination).<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `Catalogs Read`
     * Get Create Variants Jobs
     */
    async getCreateVariantsJobs(requestParameters: GetCreateVariantsJobsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCatalogVariantCreateJobResponseCollectionWithIncludedSection> {
        const response = await this.getCreateVariantsJobsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a catalog category bulk delete job with the given job ID.<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `Catalogs Read`
     * Get Delete Categories Job
     */
    async getDeleteCategoriesJobRaw(requestParameters: GetDeleteCategoriesJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCatalogCategoryDeleteJobResponse>> {
        if (requestParameters.jobId === null || requestParameters.jobId === undefined) {
            throw new runtime.RequiredError('jobId','Required parameter requestParameters.jobId was null or undefined when calling getDeleteCategoriesJob.');
        }

        if (requestParameters.revision === null || requestParameters.revision === undefined) {
            throw new runtime.RequiredError('revision','Required parameter requestParameters.revision was null or undefined when calling getDeleteCategoriesJob.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsCatalogCategoryBulkDeleteJob) {
            queryParameters['fields[catalog-category-bulk-delete-job]'] = requestParameters.fieldsCatalogCategoryBulkDeleteJob.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.revision !== undefined && requestParameters.revision !== null) {
            headerParameters['revision'] = String(requestParameters.revision);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Klaviyo-API-Key authentication
        }

        const response = await this.request({
            path: `/api/catalog-category-bulk-delete-jobs/{job_id}/`.replace(`{${"job_id"}}`, encodeURIComponent(String(requestParameters.jobId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCatalogCategoryDeleteJobResponseFromJSON(jsonValue));
    }

    /**
     * Get a catalog category bulk delete job with the given job ID.<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `Catalogs Read`
     * Get Delete Categories Job
     */
    async getDeleteCategoriesJob(requestParameters: GetDeleteCategoriesJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCatalogCategoryDeleteJobResponse> {
        const response = await this.getDeleteCategoriesJobRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all catalog category bulk delete jobs. Returns a maximum of 100 jobs per request, which can be paginated with [cursor-based pagination](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#pagination).<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `Catalogs Read`
     * Get Delete Categories Jobs
     */
    async getDeleteCategoriesJobsRaw(requestParameters: GetDeleteCategoriesJobsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCatalogCategoryDeleteJobResponseCollection>> {
        if (requestParameters.revision === null || requestParameters.revision === undefined) {
            throw new runtime.RequiredError('revision','Required parameter requestParameters.revision was null or undefined when calling getDeleteCategoriesJobs.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsCatalogCategoryBulkDeleteJob) {
            queryParameters['fields[catalog-category-bulk-delete-job]'] = requestParameters.fieldsCatalogCategoryBulkDeleteJob.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.pageCursor !== undefined) {
            queryParameters['page[cursor]'] = requestParameters.pageCursor;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.revision !== undefined && requestParameters.revision !== null) {
            headerParameters['revision'] = String(requestParameters.revision);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Klaviyo-API-Key authentication
        }

        const response = await this.request({
            path: `/api/catalog-category-bulk-delete-jobs/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCatalogCategoryDeleteJobResponseCollectionFromJSON(jsonValue));
    }

    /**
     * Get all catalog category bulk delete jobs. Returns a maximum of 100 jobs per request, which can be paginated with [cursor-based pagination](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#pagination).<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `Catalogs Read`
     * Get Delete Categories Jobs
     */
    async getDeleteCategoriesJobs(requestParameters: GetDeleteCategoriesJobsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCatalogCategoryDeleteJobResponseCollection> {
        const response = await this.getDeleteCategoriesJobsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a catalog item bulk delete job with the given job ID.<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `Catalogs Read`
     * Get Delete Items Job
     */
    async getDeleteItemsJobRaw(requestParameters: GetDeleteItemsJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCatalogItemDeleteJobResponse>> {
        if (requestParameters.jobId === null || requestParameters.jobId === undefined) {
            throw new runtime.RequiredError('jobId','Required parameter requestParameters.jobId was null or undefined when calling getDeleteItemsJob.');
        }

        if (requestParameters.revision === null || requestParameters.revision === undefined) {
            throw new runtime.RequiredError('revision','Required parameter requestParameters.revision was null or undefined when calling getDeleteItemsJob.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsCatalogItemBulkDeleteJob) {
            queryParameters['fields[catalog-item-bulk-delete-job]'] = requestParameters.fieldsCatalogItemBulkDeleteJob.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.revision !== undefined && requestParameters.revision !== null) {
            headerParameters['revision'] = String(requestParameters.revision);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Klaviyo-API-Key authentication
        }

        const response = await this.request({
            path: `/api/catalog-item-bulk-delete-jobs/{job_id}/`.replace(`{${"job_id"}}`, encodeURIComponent(String(requestParameters.jobId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCatalogItemDeleteJobResponseFromJSON(jsonValue));
    }

    /**
     * Get a catalog item bulk delete job with the given job ID.<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `Catalogs Read`
     * Get Delete Items Job
     */
    async getDeleteItemsJob(requestParameters: GetDeleteItemsJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCatalogItemDeleteJobResponse> {
        const response = await this.getDeleteItemsJobRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all catalog item bulk delete jobs. Returns a maximum of 100 jobs per request, which can be paginated with [cursor-based pagination](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#pagination).<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `Catalogs Read`
     * Get Delete Items Jobs
     */
    async getDeleteItemsJobsRaw(requestParameters: GetDeleteItemsJobsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCatalogItemDeleteJobResponseCollection>> {
        if (requestParameters.revision === null || requestParameters.revision === undefined) {
            throw new runtime.RequiredError('revision','Required parameter requestParameters.revision was null or undefined when calling getDeleteItemsJobs.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsCatalogItemBulkDeleteJob) {
            queryParameters['fields[catalog-item-bulk-delete-job]'] = requestParameters.fieldsCatalogItemBulkDeleteJob.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.pageCursor !== undefined) {
            queryParameters['page[cursor]'] = requestParameters.pageCursor;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.revision !== undefined && requestParameters.revision !== null) {
            headerParameters['revision'] = String(requestParameters.revision);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Klaviyo-API-Key authentication
        }

        const response = await this.request({
            path: `/api/catalog-item-bulk-delete-jobs/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCatalogItemDeleteJobResponseCollectionFromJSON(jsonValue));
    }

    /**
     * Get all catalog item bulk delete jobs. Returns a maximum of 100 jobs per request, which can be paginated with [cursor-based pagination](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#pagination).<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `Catalogs Read`
     * Get Delete Items Jobs
     */
    async getDeleteItemsJobs(requestParameters: GetDeleteItemsJobsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCatalogItemDeleteJobResponseCollection> {
        const response = await this.getDeleteItemsJobsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a catalog variant bulk delete job with the given job ID.<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `Catalogs Read`
     * Get Delete Variants Job
     */
    async getDeleteVariantsJobRaw(requestParameters: GetDeleteVariantsJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCatalogVariantDeleteJobResponse>> {
        if (requestParameters.jobId === null || requestParameters.jobId === undefined) {
            throw new runtime.RequiredError('jobId','Required parameter requestParameters.jobId was null or undefined when calling getDeleteVariantsJob.');
        }

        if (requestParameters.revision === null || requestParameters.revision === undefined) {
            throw new runtime.RequiredError('revision','Required parameter requestParameters.revision was null or undefined when calling getDeleteVariantsJob.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsCatalogVariantBulkDeleteJob) {
            queryParameters['fields[catalog-variant-bulk-delete-job]'] = requestParameters.fieldsCatalogVariantBulkDeleteJob.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.revision !== undefined && requestParameters.revision !== null) {
            headerParameters['revision'] = String(requestParameters.revision);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Klaviyo-API-Key authentication
        }

        const response = await this.request({
            path: `/api/catalog-variant-bulk-delete-jobs/{job_id}/`.replace(`{${"job_id"}}`, encodeURIComponent(String(requestParameters.jobId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCatalogVariantDeleteJobResponseFromJSON(jsonValue));
    }

    /**
     * Get a catalog variant bulk delete job with the given job ID.<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `Catalogs Read`
     * Get Delete Variants Job
     */
    async getDeleteVariantsJob(requestParameters: GetDeleteVariantsJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCatalogVariantDeleteJobResponse> {
        const response = await this.getDeleteVariantsJobRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all catalog variant bulk delete jobs. Returns a maximum of 100 jobs per request, which can be paginated with [cursor-based pagination](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#pagination).<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `Catalogs Read`
     * Get Delete Variants Jobs
     */
    async getDeleteVariantsJobsRaw(requestParameters: GetDeleteVariantsJobsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCatalogVariantDeleteJobResponseCollection>> {
        if (requestParameters.revision === null || requestParameters.revision === undefined) {
            throw new runtime.RequiredError('revision','Required parameter requestParameters.revision was null or undefined when calling getDeleteVariantsJobs.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsCatalogVariantBulkDeleteJob) {
            queryParameters['fields[catalog-variant-bulk-delete-job]'] = requestParameters.fieldsCatalogVariantBulkDeleteJob.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.pageCursor !== undefined) {
            queryParameters['page[cursor]'] = requestParameters.pageCursor;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.revision !== undefined && requestParameters.revision !== null) {
            headerParameters['revision'] = String(requestParameters.revision);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Klaviyo-API-Key authentication
        }

        const response = await this.request({
            path: `/api/catalog-variant-bulk-delete-jobs/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCatalogVariantDeleteJobResponseCollectionFromJSON(jsonValue));
    }

    /**
     * Get all catalog variant bulk delete jobs. Returns a maximum of 100 jobs per request, which can be paginated with [cursor-based pagination](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#pagination).<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `Catalogs Read`
     * Get Delete Variants Jobs
     */
    async getDeleteVariantsJobs(requestParameters: GetDeleteVariantsJobsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCatalogVariantDeleteJobResponseCollection> {
        const response = await this.getDeleteVariantsJobsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a catalog category bulk update job with the given job ID. Include parameters can be provided to get the following related resource data: `categories`<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `Catalogs Read`
     * Get Update Categories Job
     */
    async getUpdateCategoriesJobRaw(requestParameters: GetUpdateCategoriesJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCatalogCategoryUpdateJobResponseWithIncludedSection>> {
        if (requestParameters.jobId === null || requestParameters.jobId === undefined) {
            throw new runtime.RequiredError('jobId','Required parameter requestParameters.jobId was null or undefined when calling getUpdateCategoriesJob.');
        }

        if (requestParameters.revision === null || requestParameters.revision === undefined) {
            throw new runtime.RequiredError('revision','Required parameter requestParameters.revision was null or undefined when calling getUpdateCategoriesJob.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsCatalogCategoryBulkUpdateJob) {
            queryParameters['fields[catalog-category-bulk-update-job]'] = requestParameters.fieldsCatalogCategoryBulkUpdateJob.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsCatalogCategory) {
            queryParameters['fields[catalog-category]'] = requestParameters.fieldsCatalogCategory.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.revision !== undefined && requestParameters.revision !== null) {
            headerParameters['revision'] = String(requestParameters.revision);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Klaviyo-API-Key authentication
        }

        const response = await this.request({
            path: `/api/catalog-category-bulk-update-jobs/{job_id}/`.replace(`{${"job_id"}}`, encodeURIComponent(String(requestParameters.jobId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCatalogCategoryUpdateJobResponseWithIncludedSectionFromJSON(jsonValue));
    }

    /**
     * Get a catalog category bulk update job with the given job ID. Include parameters can be provided to get the following related resource data: `categories`<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `Catalogs Read`
     * Get Update Categories Job
     */
    async getUpdateCategoriesJob(requestParameters: GetUpdateCategoriesJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCatalogCategoryUpdateJobResponseWithIncludedSection> {
        const response = await this.getUpdateCategoriesJobRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all catalog category bulk update jobs. Returns a maximum of 100 jobs per request, which can be paginated with [cursor-based pagination](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#pagination).<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `Catalogs Read`
     * Get Update Categories Jobs
     */
    async getUpdateCategoriesJobsRaw(requestParameters: GetUpdateCategoriesJobsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCatalogCategoryUpdateJobResponseCollectionWithIncludedSection>> {
        if (requestParameters.revision === null || requestParameters.revision === undefined) {
            throw new runtime.RequiredError('revision','Required parameter requestParameters.revision was null or undefined when calling getUpdateCategoriesJobs.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsCatalogCategoryBulkUpdateJob) {
            queryParameters['fields[catalog-category-bulk-update-job]'] = requestParameters.fieldsCatalogCategoryBulkUpdateJob.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.pageCursor !== undefined) {
            queryParameters['page[cursor]'] = requestParameters.pageCursor;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.revision !== undefined && requestParameters.revision !== null) {
            headerParameters['revision'] = String(requestParameters.revision);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Klaviyo-API-Key authentication
        }

        const response = await this.request({
            path: `/api/catalog-category-bulk-update-jobs/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCatalogCategoryUpdateJobResponseCollectionWithIncludedSectionFromJSON(jsonValue));
    }

    /**
     * Get all catalog category bulk update jobs. Returns a maximum of 100 jobs per request, which can be paginated with [cursor-based pagination](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#pagination).<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `Catalogs Read`
     * Get Update Categories Jobs
     */
    async getUpdateCategoriesJobs(requestParameters: GetUpdateCategoriesJobsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCatalogCategoryUpdateJobResponseCollectionWithIncludedSection> {
        const response = await this.getUpdateCategoriesJobsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a catalog item bulk update job with the given job ID. Include parameters can be provided to get the following related resource data: `items`<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `Catalogs Read`
     * Get Update Items Job
     */
    async getUpdateItemsJobRaw(requestParameters: GetUpdateItemsJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCatalogItemUpdateJobResponseWithIncludedSection>> {
        if (requestParameters.jobId === null || requestParameters.jobId === undefined) {
            throw new runtime.RequiredError('jobId','Required parameter requestParameters.jobId was null or undefined when calling getUpdateItemsJob.');
        }

        if (requestParameters.revision === null || requestParameters.revision === undefined) {
            throw new runtime.RequiredError('revision','Required parameter requestParameters.revision was null or undefined when calling getUpdateItemsJob.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsCatalogItemBulkUpdateJob) {
            queryParameters['fields[catalog-item-bulk-update-job]'] = requestParameters.fieldsCatalogItemBulkUpdateJob.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsCatalogItem) {
            queryParameters['fields[catalog-item]'] = requestParameters.fieldsCatalogItem.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.revision !== undefined && requestParameters.revision !== null) {
            headerParameters['revision'] = String(requestParameters.revision);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Klaviyo-API-Key authentication
        }

        const response = await this.request({
            path: `/api/catalog-item-bulk-update-jobs/{job_id}/`.replace(`{${"job_id"}}`, encodeURIComponent(String(requestParameters.jobId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCatalogItemUpdateJobResponseWithIncludedSectionFromJSON(jsonValue));
    }

    /**
     * Get a catalog item bulk update job with the given job ID. Include parameters can be provided to get the following related resource data: `items`<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `Catalogs Read`
     * Get Update Items Job
     */
    async getUpdateItemsJob(requestParameters: GetUpdateItemsJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCatalogItemUpdateJobResponseWithIncludedSection> {
        const response = await this.getUpdateItemsJobRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all catalog item bulk update jobs. Returns a maximum of 100 jobs per request, which can be paginated with [cursor-based pagination](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#pagination).<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `Catalogs Read`
     * Get Update Items Jobs
     */
    async getUpdateItemsJobsRaw(requestParameters: GetUpdateItemsJobsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCatalogItemUpdateJobResponseCollectionWithIncludedSection>> {
        if (requestParameters.revision === null || requestParameters.revision === undefined) {
            throw new runtime.RequiredError('revision','Required parameter requestParameters.revision was null or undefined when calling getUpdateItemsJobs.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsCatalogItemBulkUpdateJob) {
            queryParameters['fields[catalog-item-bulk-update-job]'] = requestParameters.fieldsCatalogItemBulkUpdateJob.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.pageCursor !== undefined) {
            queryParameters['page[cursor]'] = requestParameters.pageCursor;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.revision !== undefined && requestParameters.revision !== null) {
            headerParameters['revision'] = String(requestParameters.revision);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Klaviyo-API-Key authentication
        }

        const response = await this.request({
            path: `/api/catalog-item-bulk-update-jobs/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCatalogItemUpdateJobResponseCollectionWithIncludedSectionFromJSON(jsonValue));
    }

    /**
     * Get all catalog item bulk update jobs. Returns a maximum of 100 jobs per request, which can be paginated with [cursor-based pagination](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#pagination).<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `Catalogs Read`
     * Get Update Items Jobs
     */
    async getUpdateItemsJobs(requestParameters: GetUpdateItemsJobsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCatalogItemUpdateJobResponseCollectionWithIncludedSection> {
        const response = await this.getUpdateItemsJobsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a catalog variate bulk update job with the given job ID. Include parameters can be provided to get the following related resource data: `variants`.<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `Catalogs Read`
     * Get Update Variants Job
     */
    async getUpdateVariantsJobRaw(requestParameters: GetUpdateVariantsJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCatalogVariantUpdateJobResponseWithIncludedSection>> {
        if (requestParameters.jobId === null || requestParameters.jobId === undefined) {
            throw new runtime.RequiredError('jobId','Required parameter requestParameters.jobId was null or undefined when calling getUpdateVariantsJob.');
        }

        if (requestParameters.revision === null || requestParameters.revision === undefined) {
            throw new runtime.RequiredError('revision','Required parameter requestParameters.revision was null or undefined when calling getUpdateVariantsJob.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsCatalogVariantBulkUpdateJob) {
            queryParameters['fields[catalog-variant-bulk-update-job]'] = requestParameters.fieldsCatalogVariantBulkUpdateJob.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsCatalogVariant) {
            queryParameters['fields[catalog-variant]'] = requestParameters.fieldsCatalogVariant.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.revision !== undefined && requestParameters.revision !== null) {
            headerParameters['revision'] = String(requestParameters.revision);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Klaviyo-API-Key authentication
        }

        const response = await this.request({
            path: `/api/catalog-variant-bulk-update-jobs/{job_id}/`.replace(`{${"job_id"}}`, encodeURIComponent(String(requestParameters.jobId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCatalogVariantUpdateJobResponseWithIncludedSectionFromJSON(jsonValue));
    }

    /**
     * Get a catalog variate bulk update job with the given job ID. Include parameters can be provided to get the following related resource data: `variants`.<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `Catalogs Read`
     * Get Update Variants Job
     */
    async getUpdateVariantsJob(requestParameters: GetUpdateVariantsJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCatalogVariantUpdateJobResponseWithIncludedSection> {
        const response = await this.getUpdateVariantsJobRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all catalog variant bulk update jobs. Returns a maximum of 100 jobs per request, which can be paginated with [cursor-based pagination](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#pagination).<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `Catalogs Read`
     * Get Update Variants Jobs
     */
    async getUpdateVariantsJobsRaw(requestParameters: GetUpdateVariantsJobsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCatalogVariantUpdateJobResponseCollectionWithIncludedSection>> {
        if (requestParameters.revision === null || requestParameters.revision === undefined) {
            throw new runtime.RequiredError('revision','Required parameter requestParameters.revision was null or undefined when calling getUpdateVariantsJobs.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsCatalogVariantBulkUpdateJob) {
            queryParameters['fields[catalog-variant-bulk-update-job]'] = requestParameters.fieldsCatalogVariantBulkUpdateJob.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.pageCursor !== undefined) {
            queryParameters['page[cursor]'] = requestParameters.pageCursor;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.revision !== undefined && requestParameters.revision !== null) {
            headerParameters['revision'] = String(requestParameters.revision);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Klaviyo-API-Key authentication
        }

        const response = await this.request({
            path: `/api/catalog-variant-bulk-update-jobs/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCatalogVariantUpdateJobResponseCollectionWithIncludedSectionFromJSON(jsonValue));
    }

    /**
     * Get all catalog variant bulk update jobs. Returns a maximum of 100 jobs per request, which can be paginated with [cursor-based pagination](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#pagination).<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `Catalogs Read`
     * Get Update Variants Jobs
     */
    async getUpdateVariantsJobs(requestParameters: GetUpdateVariantsJobsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCatalogVariantUpdateJobResponseCollectionWithIncludedSection> {
        const response = await this.getUpdateVariantsJobsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a catalog category bulk create job to create a batch of catalog categories.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `Catalogs Write`
     * Spawn Create Categories Job
     */
    async spawnCreateCategoriesJobRaw(requestParameters: SpawnCreateCategoriesJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostCatalogCategoryCreateJobResponse>> {
        if (requestParameters.revision === null || requestParameters.revision === undefined) {
            throw new runtime.RequiredError('revision','Required parameter requestParameters.revision was null or undefined when calling spawnCreateCategoriesJob.');
        }

        if (requestParameters.catalogCategoryCreateJobCreateQuery === null || requestParameters.catalogCategoryCreateJobCreateQuery === undefined) {
            throw new runtime.RequiredError('catalogCategoryCreateJobCreateQuery','Required parameter requestParameters.catalogCategoryCreateJobCreateQuery was null or undefined when calling spawnCreateCategoriesJob.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.revision !== undefined && requestParameters.revision !== null) {
            headerParameters['revision'] = String(requestParameters.revision);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Klaviyo-API-Key authentication
        }

        const response = await this.request({
            path: `/api/catalog-category-bulk-create-jobs/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CatalogCategoryCreateJobCreateQueryToJSON(requestParameters.catalogCategoryCreateJobCreateQuery),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostCatalogCategoryCreateJobResponseFromJSON(jsonValue));
    }

    /**
     * Create a catalog category bulk create job to create a batch of catalog categories.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `Catalogs Write`
     * Spawn Create Categories Job
     */
    async spawnCreateCategoriesJob(requestParameters: SpawnCreateCategoriesJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostCatalogCategoryCreateJobResponse> {
        const response = await this.spawnCreateCategoriesJobRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a catalog item bulk create job to create a batch of catalog items.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `Catalogs Write`
     * Spawn Create Items Job
     */
    async spawnCreateItemsJobRaw(requestParameters: SpawnCreateItemsJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostCatalogItemCreateJobResponse>> {
        if (requestParameters.revision === null || requestParameters.revision === undefined) {
            throw new runtime.RequiredError('revision','Required parameter requestParameters.revision was null or undefined when calling spawnCreateItemsJob.');
        }

        if (requestParameters.catalogItemCreateJobCreateQuery === null || requestParameters.catalogItemCreateJobCreateQuery === undefined) {
            throw new runtime.RequiredError('catalogItemCreateJobCreateQuery','Required parameter requestParameters.catalogItemCreateJobCreateQuery was null or undefined when calling spawnCreateItemsJob.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.revision !== undefined && requestParameters.revision !== null) {
            headerParameters['revision'] = String(requestParameters.revision);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Klaviyo-API-Key authentication
        }

        const response = await this.request({
            path: `/api/catalog-item-bulk-create-jobs/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CatalogItemCreateJobCreateQueryToJSON(requestParameters.catalogItemCreateJobCreateQuery),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostCatalogItemCreateJobResponseFromJSON(jsonValue));
    }

    /**
     * Create a catalog item bulk create job to create a batch of catalog items.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `Catalogs Write`
     * Spawn Create Items Job
     */
    async spawnCreateItemsJob(requestParameters: SpawnCreateItemsJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostCatalogItemCreateJobResponse> {
        const response = await this.spawnCreateItemsJobRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a catalog variant bulk create job to create a batch of catalog variants.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `Catalogs Write`
     * Spawn Create Variants Job
     */
    async spawnCreateVariantsJobRaw(requestParameters: SpawnCreateVariantsJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostCatalogVariantCreateJobResponse>> {
        if (requestParameters.revision === null || requestParameters.revision === undefined) {
            throw new runtime.RequiredError('revision','Required parameter requestParameters.revision was null or undefined when calling spawnCreateVariantsJob.');
        }

        if (requestParameters.catalogVariantCreateJobCreateQuery === null || requestParameters.catalogVariantCreateJobCreateQuery === undefined) {
            throw new runtime.RequiredError('catalogVariantCreateJobCreateQuery','Required parameter requestParameters.catalogVariantCreateJobCreateQuery was null or undefined when calling spawnCreateVariantsJob.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.revision !== undefined && requestParameters.revision !== null) {
            headerParameters['revision'] = String(requestParameters.revision);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Klaviyo-API-Key authentication
        }

        const response = await this.request({
            path: `/api/catalog-variant-bulk-create-jobs/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CatalogVariantCreateJobCreateQueryToJSON(requestParameters.catalogVariantCreateJobCreateQuery),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostCatalogVariantCreateJobResponseFromJSON(jsonValue));
    }

    /**
     * Create a catalog variant bulk create job to create a batch of catalog variants.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `Catalogs Write`
     * Spawn Create Variants Job
     */
    async spawnCreateVariantsJob(requestParameters: SpawnCreateVariantsJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostCatalogVariantCreateJobResponse> {
        const response = await this.spawnCreateVariantsJobRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a catalog category bulk delete job to delete a batch of catalog categories.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `Catalogs Write`
     * Spawn Delete Categories Job
     */
    async spawnDeleteCategoriesJobRaw(requestParameters: SpawnDeleteCategoriesJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostCatalogCategoryDeleteJobResponse>> {
        if (requestParameters.revision === null || requestParameters.revision === undefined) {
            throw new runtime.RequiredError('revision','Required parameter requestParameters.revision was null or undefined when calling spawnDeleteCategoriesJob.');
        }

        if (requestParameters.catalogCategoryDeleteJobCreateQuery === null || requestParameters.catalogCategoryDeleteJobCreateQuery === undefined) {
            throw new runtime.RequiredError('catalogCategoryDeleteJobCreateQuery','Required parameter requestParameters.catalogCategoryDeleteJobCreateQuery was null or undefined when calling spawnDeleteCategoriesJob.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.revision !== undefined && requestParameters.revision !== null) {
            headerParameters['revision'] = String(requestParameters.revision);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Klaviyo-API-Key authentication
        }

        const response = await this.request({
            path: `/api/catalog-category-bulk-delete-jobs/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CatalogCategoryDeleteJobCreateQueryToJSON(requestParameters.catalogCategoryDeleteJobCreateQuery),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostCatalogCategoryDeleteJobResponseFromJSON(jsonValue));
    }

    /**
     * Create a catalog category bulk delete job to delete a batch of catalog categories.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `Catalogs Write`
     * Spawn Delete Categories Job
     */
    async spawnDeleteCategoriesJob(requestParameters: SpawnDeleteCategoriesJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostCatalogCategoryDeleteJobResponse> {
        const response = await this.spawnDeleteCategoriesJobRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a catalog item bulk delete job to delete a batch of catalog items.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `Catalogs Write`
     * Spawn Delete Items Job
     */
    async spawnDeleteItemsJobRaw(requestParameters: SpawnDeleteItemsJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostCatalogItemDeleteJobResponse>> {
        if (requestParameters.revision === null || requestParameters.revision === undefined) {
            throw new runtime.RequiredError('revision','Required parameter requestParameters.revision was null or undefined when calling spawnDeleteItemsJob.');
        }

        if (requestParameters.catalogItemDeleteJobCreateQuery === null || requestParameters.catalogItemDeleteJobCreateQuery === undefined) {
            throw new runtime.RequiredError('catalogItemDeleteJobCreateQuery','Required parameter requestParameters.catalogItemDeleteJobCreateQuery was null or undefined when calling spawnDeleteItemsJob.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.revision !== undefined && requestParameters.revision !== null) {
            headerParameters['revision'] = String(requestParameters.revision);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Klaviyo-API-Key authentication
        }

        const response = await this.request({
            path: `/api/catalog-item-bulk-delete-jobs/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CatalogItemDeleteJobCreateQueryToJSON(requestParameters.catalogItemDeleteJobCreateQuery),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostCatalogItemDeleteJobResponseFromJSON(jsonValue));
    }

    /**
     * Create a catalog item bulk delete job to delete a batch of catalog items.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `Catalogs Write`
     * Spawn Delete Items Job
     */
    async spawnDeleteItemsJob(requestParameters: SpawnDeleteItemsJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostCatalogItemDeleteJobResponse> {
        const response = await this.spawnDeleteItemsJobRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a catalog variant bulk delete job to delete a batch of catalog variants.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `Catalogs Write`
     * Spawn Delete Variants Job
     */
    async spawnDeleteVariantsJobRaw(requestParameters: SpawnDeleteVariantsJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostCatalogVariantDeleteJobResponse>> {
        if (requestParameters.revision === null || requestParameters.revision === undefined) {
            throw new runtime.RequiredError('revision','Required parameter requestParameters.revision was null or undefined when calling spawnDeleteVariantsJob.');
        }

        if (requestParameters.catalogVariantDeleteJobCreateQuery === null || requestParameters.catalogVariantDeleteJobCreateQuery === undefined) {
            throw new runtime.RequiredError('catalogVariantDeleteJobCreateQuery','Required parameter requestParameters.catalogVariantDeleteJobCreateQuery was null or undefined when calling spawnDeleteVariantsJob.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.revision !== undefined && requestParameters.revision !== null) {
            headerParameters['revision'] = String(requestParameters.revision);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Klaviyo-API-Key authentication
        }

        const response = await this.request({
            path: `/api/catalog-variant-bulk-delete-jobs/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CatalogVariantDeleteJobCreateQueryToJSON(requestParameters.catalogVariantDeleteJobCreateQuery),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostCatalogVariantDeleteJobResponseFromJSON(jsonValue));
    }

    /**
     * Create a catalog variant bulk delete job to delete a batch of catalog variants.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `Catalogs Write`
     * Spawn Delete Variants Job
     */
    async spawnDeleteVariantsJob(requestParameters: SpawnDeleteVariantsJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostCatalogVariantDeleteJobResponse> {
        const response = await this.spawnDeleteVariantsJobRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a catalog category bulk update job to update a batch of catalog categories.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `Catalogs Write`
     * Spawn Update Categories Job
     */
    async spawnUpdateCategoriesJobRaw(requestParameters: SpawnUpdateCategoriesJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostCatalogCategoryUpdateJobResponse>> {
        if (requestParameters.revision === null || requestParameters.revision === undefined) {
            throw new runtime.RequiredError('revision','Required parameter requestParameters.revision was null or undefined when calling spawnUpdateCategoriesJob.');
        }

        if (requestParameters.catalogCategoryUpdateJobCreateQuery === null || requestParameters.catalogCategoryUpdateJobCreateQuery === undefined) {
            throw new runtime.RequiredError('catalogCategoryUpdateJobCreateQuery','Required parameter requestParameters.catalogCategoryUpdateJobCreateQuery was null or undefined when calling spawnUpdateCategoriesJob.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.revision !== undefined && requestParameters.revision !== null) {
            headerParameters['revision'] = String(requestParameters.revision);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Klaviyo-API-Key authentication
        }

        const response = await this.request({
            path: `/api/catalog-category-bulk-update-jobs/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CatalogCategoryUpdateJobCreateQueryToJSON(requestParameters.catalogCategoryUpdateJobCreateQuery),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostCatalogCategoryUpdateJobResponseFromJSON(jsonValue));
    }

    /**
     * Create a catalog category bulk update job to update a batch of catalog categories.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `Catalogs Write`
     * Spawn Update Categories Job
     */
    async spawnUpdateCategoriesJob(requestParameters: SpawnUpdateCategoriesJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostCatalogCategoryUpdateJobResponse> {
        const response = await this.spawnUpdateCategoriesJobRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a catalog item bulk update job to update a batch of catalog items.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `Catalogs Write`
     * Spawn Update Items Job
     */
    async spawnUpdateItemsJobRaw(requestParameters: SpawnUpdateItemsJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostCatalogItemUpdateJobResponse>> {
        if (requestParameters.revision === null || requestParameters.revision === undefined) {
            throw new runtime.RequiredError('revision','Required parameter requestParameters.revision was null or undefined when calling spawnUpdateItemsJob.');
        }

        if (requestParameters.catalogItemUpdateJobCreateQuery === null || requestParameters.catalogItemUpdateJobCreateQuery === undefined) {
            throw new runtime.RequiredError('catalogItemUpdateJobCreateQuery','Required parameter requestParameters.catalogItemUpdateJobCreateQuery was null or undefined when calling spawnUpdateItemsJob.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.revision !== undefined && requestParameters.revision !== null) {
            headerParameters['revision'] = String(requestParameters.revision);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Klaviyo-API-Key authentication
        }

        const response = await this.request({
            path: `/api/catalog-item-bulk-update-jobs/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CatalogItemUpdateJobCreateQueryToJSON(requestParameters.catalogItemUpdateJobCreateQuery),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostCatalogItemUpdateJobResponseFromJSON(jsonValue));
    }

    /**
     * Create a catalog item bulk update job to update a batch of catalog items.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `Catalogs Write`
     * Spawn Update Items Job
     */
    async spawnUpdateItemsJob(requestParameters: SpawnUpdateItemsJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostCatalogItemUpdateJobResponse> {
        const response = await this.spawnUpdateItemsJobRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a catalog variant bulk update job to update a batch of catalog variants.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `Catalogs Write`
     * Spawn Update Variants Job
     */
    async spawnUpdateVariantsJobRaw(requestParameters: SpawnUpdateVariantsJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostCatalogVariantUpdateJobResponse>> {
        if (requestParameters.revision === null || requestParameters.revision === undefined) {
            throw new runtime.RequiredError('revision','Required parameter requestParameters.revision was null or undefined when calling spawnUpdateVariantsJob.');
        }

        if (requestParameters.catalogVariantUpdateJobCreateQuery === null || requestParameters.catalogVariantUpdateJobCreateQuery === undefined) {
            throw new runtime.RequiredError('catalogVariantUpdateJobCreateQuery','Required parameter requestParameters.catalogVariantUpdateJobCreateQuery was null or undefined when calling spawnUpdateVariantsJob.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.revision !== undefined && requestParameters.revision !== null) {
            headerParameters['revision'] = String(requestParameters.revision);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Klaviyo-API-Key authentication
        }

        const response = await this.request({
            path: `/api/catalog-variant-bulk-update-jobs/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CatalogVariantUpdateJobCreateQueryToJSON(requestParameters.catalogVariantUpdateJobCreateQuery),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostCatalogVariantUpdateJobResponseFromJSON(jsonValue));
    }

    /**
     * Create a catalog variant bulk update job to update a batch of catalog variants.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `Catalogs Write`
     * Spawn Update Variants Job
     */
    async spawnUpdateVariantsJob(requestParameters: SpawnUpdateVariantsJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostCatalogVariantUpdateJobResponse> {
        const response = await this.spawnUpdateVariantsJobRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a catalog category with the given category ID.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `Catalogs Write`
     * Update Catalog Category
     */
    async updateCatalogCategoryRaw(requestParameters: UpdateCatalogCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PatchCatalogCategoryResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateCatalogCategory.');
        }

        if (requestParameters.revision === null || requestParameters.revision === undefined) {
            throw new runtime.RequiredError('revision','Required parameter requestParameters.revision was null or undefined when calling updateCatalogCategory.');
        }

        if (requestParameters.catalogCategoryUpdateQuery === null || requestParameters.catalogCategoryUpdateQuery === undefined) {
            throw new runtime.RequiredError('catalogCategoryUpdateQuery','Required parameter requestParameters.catalogCategoryUpdateQuery was null or undefined when calling updateCatalogCategory.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.revision !== undefined && requestParameters.revision !== null) {
            headerParameters['revision'] = String(requestParameters.revision);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Klaviyo-API-Key authentication
        }

        const response = await this.request({
            path: `/api/catalog-categories/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: CatalogCategoryUpdateQueryToJSON(requestParameters.catalogCategoryUpdateQuery),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PatchCatalogCategoryResponseFromJSON(jsonValue));
    }

    /**
     * Update a catalog category with the given category ID.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `Catalogs Write`
     * Update Catalog Category
     */
    async updateCatalogCategory(requestParameters: UpdateCatalogCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PatchCatalogCategoryResponse> {
        const response = await this.updateCatalogCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update item relationships for the given category ID.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `Catalogs Write`
     * Update Catalog Category Relationships
     */
    async updateCatalogCategoryRelationshipsRaw(requestParameters: UpdateCatalogCategoryRelationshipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateCatalogCategoryRelationships.');
        }

        if (requestParameters.relatedResource === null || requestParameters.relatedResource === undefined) {
            throw new runtime.RequiredError('relatedResource','Required parameter requestParameters.relatedResource was null or undefined when calling updateCatalogCategoryRelationships.');
        }

        if (requestParameters.revision === null || requestParameters.revision === undefined) {
            throw new runtime.RequiredError('revision','Required parameter requestParameters.revision was null or undefined when calling updateCatalogCategoryRelationships.');
        }

        if (requestParameters.catalogCategoryItemOp === null || requestParameters.catalogCategoryItemOp === undefined) {
            throw new runtime.RequiredError('catalogCategoryItemOp','Required parameter requestParameters.catalogCategoryItemOp was null or undefined when calling updateCatalogCategoryRelationships.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.revision !== undefined && requestParameters.revision !== null) {
            headerParameters['revision'] = String(requestParameters.revision);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Klaviyo-API-Key authentication
        }

        const response = await this.request({
            path: `/api/catalog-categories/{id}/relationships/{related_resource}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"related_resource"}}`, encodeURIComponent(String(requestParameters.relatedResource))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: CatalogCategoryItemOpToJSON(requestParameters.catalogCategoryItemOp),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update item relationships for the given category ID.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `Catalogs Write`
     * Update Catalog Category Relationships
     */
    async updateCatalogCategoryRelationships(requestParameters: UpdateCatalogCategoryRelationshipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateCatalogCategoryRelationshipsRaw(requestParameters, initOverrides);
    }

    /**
     * Update a catalog item with the given item ID.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `Catalogs Write`
     * Update Catalog Item
     */
    async updateCatalogItemRaw(requestParameters: UpdateCatalogItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PatchCatalogItemResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateCatalogItem.');
        }

        if (requestParameters.revision === null || requestParameters.revision === undefined) {
            throw new runtime.RequiredError('revision','Required parameter requestParameters.revision was null or undefined when calling updateCatalogItem.');
        }

        if (requestParameters.catalogItemUpdateQuery === null || requestParameters.catalogItemUpdateQuery === undefined) {
            throw new runtime.RequiredError('catalogItemUpdateQuery','Required parameter requestParameters.catalogItemUpdateQuery was null or undefined when calling updateCatalogItem.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.revision !== undefined && requestParameters.revision !== null) {
            headerParameters['revision'] = String(requestParameters.revision);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Klaviyo-API-Key authentication
        }

        const response = await this.request({
            path: `/api/catalog-items/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: CatalogItemUpdateQueryToJSON(requestParameters.catalogItemUpdateQuery),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PatchCatalogItemResponseFromJSON(jsonValue));
    }

    /**
     * Update a catalog item with the given item ID.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `Catalogs Write`
     * Update Catalog Item
     */
    async updateCatalogItem(requestParameters: UpdateCatalogItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PatchCatalogItemResponse> {
        const response = await this.updateCatalogItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update catalog category relationships for the given item ID.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `Catalogs Write`
     * Update Catalog Item Relationships
     */
    async updateCatalogItemRelationshipsRaw(requestParameters: UpdateCatalogItemRelationshipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateCatalogItemRelationships.');
        }

        if (requestParameters.relatedResource === null || requestParameters.relatedResource === undefined) {
            throw new runtime.RequiredError('relatedResource','Required parameter requestParameters.relatedResource was null or undefined when calling updateCatalogItemRelationships.');
        }

        if (requestParameters.revision === null || requestParameters.revision === undefined) {
            throw new runtime.RequiredError('revision','Required parameter requestParameters.revision was null or undefined when calling updateCatalogItemRelationships.');
        }

        if (requestParameters.catalogItemCategoryOp === null || requestParameters.catalogItemCategoryOp === undefined) {
            throw new runtime.RequiredError('catalogItemCategoryOp','Required parameter requestParameters.catalogItemCategoryOp was null or undefined when calling updateCatalogItemRelationships.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.revision !== undefined && requestParameters.revision !== null) {
            headerParameters['revision'] = String(requestParameters.revision);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Klaviyo-API-Key authentication
        }

        const response = await this.request({
            path: `/api/catalog-items/{id}/relationships/{related_resource}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"related_resource"}}`, encodeURIComponent(String(requestParameters.relatedResource))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: CatalogItemCategoryOpToJSON(requestParameters.catalogItemCategoryOp),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update catalog category relationships for the given item ID.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `Catalogs Write`
     * Update Catalog Item Relationships
     */
    async updateCatalogItemRelationships(requestParameters: UpdateCatalogItemRelationshipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateCatalogItemRelationshipsRaw(requestParameters, initOverrides);
    }

    /**
     * Update a catalog item variant with the given variant ID.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `Catalogs Write`
     * Update Catalog Variant
     */
    async updateCatalogVariantRaw(requestParameters: UpdateCatalogVariantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PatchCatalogVariantResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateCatalogVariant.');
        }

        if (requestParameters.revision === null || requestParameters.revision === undefined) {
            throw new runtime.RequiredError('revision','Required parameter requestParameters.revision was null or undefined when calling updateCatalogVariant.');
        }

        if (requestParameters.catalogVariantUpdateQuery === null || requestParameters.catalogVariantUpdateQuery === undefined) {
            throw new runtime.RequiredError('catalogVariantUpdateQuery','Required parameter requestParameters.catalogVariantUpdateQuery was null or undefined when calling updateCatalogVariant.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.revision !== undefined && requestParameters.revision !== null) {
            headerParameters['revision'] = String(requestParameters.revision);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Klaviyo-API-Key authentication
        }

        const response = await this.request({
            path: `/api/catalog-variants/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: CatalogVariantUpdateQueryToJSON(requestParameters.catalogVariantUpdateQuery),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PatchCatalogVariantResponseFromJSON(jsonValue));
    }

    /**
     * Update a catalog item variant with the given variant ID.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `Catalogs Write`
     * Update Catalog Variant
     */
    async updateCatalogVariant(requestParameters: UpdateCatalogVariantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PatchCatalogVariantResponse> {
        const response = await this.updateCatalogVariantRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const CreateCatalogCategoryRelationshipsRelatedResourceEnum = {
    Items: 'items'
} as const;
export type CreateCatalogCategoryRelationshipsRelatedResourceEnum = typeof CreateCatalogCategoryRelationshipsRelatedResourceEnum[keyof typeof CreateCatalogCategoryRelationshipsRelatedResourceEnum];
/**
 * @export
 */
export const CreateCatalogItemRelationshipsRelatedResourceEnum = {
    Categories: 'categories'
} as const;
export type CreateCatalogItemRelationshipsRelatedResourceEnum = typeof CreateCatalogItemRelationshipsRelatedResourceEnum[keyof typeof CreateCatalogItemRelationshipsRelatedResourceEnum];
/**
 * @export
 */
export const DeleteCatalogCategoryRelationshipsRelatedResourceEnum = {
    Items: 'items'
} as const;
export type DeleteCatalogCategoryRelationshipsRelatedResourceEnum = typeof DeleteCatalogCategoryRelationshipsRelatedResourceEnum[keyof typeof DeleteCatalogCategoryRelationshipsRelatedResourceEnum];
/**
 * @export
 */
export const DeleteCatalogItemRelationshipsRelatedResourceEnum = {
    Categories: 'categories'
} as const;
export type DeleteCatalogItemRelationshipsRelatedResourceEnum = typeof DeleteCatalogItemRelationshipsRelatedResourceEnum[keyof typeof DeleteCatalogItemRelationshipsRelatedResourceEnum];
/**
 * @export
 */
export const GetCatalogCategoriesFieldsCatalogCategoryEnum = {
    ExternalId: 'external_id',
    Name: 'name',
    Updated: 'updated'
} as const;
export type GetCatalogCategoriesFieldsCatalogCategoryEnum = typeof GetCatalogCategoriesFieldsCatalogCategoryEnum[keyof typeof GetCatalogCategoriesFieldsCatalogCategoryEnum];
/**
 * @export
 */
export const GetCatalogCategoriesSortEnum = {
    Created: 'created',
    Created: '-created'
} as const;
export type GetCatalogCategoriesSortEnum = typeof GetCatalogCategoriesSortEnum[keyof typeof GetCatalogCategoriesSortEnum];
/**
 * @export
 */
export const GetCatalogCategoryFieldsCatalogCategoryEnum = {
    ExternalId: 'external_id',
    Name: 'name',
    Updated: 'updated'
} as const;
export type GetCatalogCategoryFieldsCatalogCategoryEnum = typeof GetCatalogCategoryFieldsCatalogCategoryEnum[keyof typeof GetCatalogCategoryFieldsCatalogCategoryEnum];
/**
 * @export
 */
export const GetCatalogCategoryItemsFieldsCatalogItemEnum = {
    ExternalId: 'external_id',
    Title: 'title',
    Description: 'description',
    Url: 'url',
    ImageFullUrl: 'image_full_url',
    ImageThumbnailUrl: 'image_thumbnail_url',
    Images: 'images',
    CustomMetadata: 'custom_metadata',
    Published: 'published',
    Created: 'created',
    Updated: 'updated'
} as const;
export type GetCatalogCategoryItemsFieldsCatalogItemEnum = typeof GetCatalogCategoryItemsFieldsCatalogItemEnum[keyof typeof GetCatalogCategoryItemsFieldsCatalogItemEnum];
/**
 * @export
 */
export const GetCatalogCategoryItemsFieldsCatalogVariantEnum = {
    ExternalId: 'external_id',
    Title: 'title',
    Description: 'description',
    Sku: 'sku',
    InventoryPolicy: 'inventory_policy',
    InventoryQuantity: 'inventory_quantity',
    Price: 'price',
    Url: 'url',
    ImageFullUrl: 'image_full_url',
    ImageThumbnailUrl: 'image_thumbnail_url',
    Images: 'images',
    CustomMetadata: 'custom_metadata',
    Published: 'published',
    Created: 'created',
    Updated: 'updated'
} as const;
export type GetCatalogCategoryItemsFieldsCatalogVariantEnum = typeof GetCatalogCategoryItemsFieldsCatalogVariantEnum[keyof typeof GetCatalogCategoryItemsFieldsCatalogVariantEnum];
/**
 * @export
 */
export const GetCatalogCategoryItemsIncludeEnum = {
    Variants: 'variants'
} as const;
export type GetCatalogCategoryItemsIncludeEnum = typeof GetCatalogCategoryItemsIncludeEnum[keyof typeof GetCatalogCategoryItemsIncludeEnum];
/**
 * @export
 */
export const GetCatalogCategoryItemsSortEnum = {
    Created: 'created',
    Created: '-created'
} as const;
export type GetCatalogCategoryItemsSortEnum = typeof GetCatalogCategoryItemsSortEnum[keyof typeof GetCatalogCategoryItemsSortEnum];
/**
 * @export
 */
export const GetCatalogCategoryRelationshipsRelatedResourceEnum = {
    Items: 'items'
} as const;
export type GetCatalogCategoryRelationshipsRelatedResourceEnum = typeof GetCatalogCategoryRelationshipsRelatedResourceEnum[keyof typeof GetCatalogCategoryRelationshipsRelatedResourceEnum];
/**
 * @export
 */
export const GetCatalogItemFieldsCatalogItemEnum = {
    ExternalId: 'external_id',
    Title: 'title',
    Description: 'description',
    Url: 'url',
    ImageFullUrl: 'image_full_url',
    ImageThumbnailUrl: 'image_thumbnail_url',
    Images: 'images',
    CustomMetadata: 'custom_metadata',
    Published: 'published',
    Created: 'created',
    Updated: 'updated'
} as const;
export type GetCatalogItemFieldsCatalogItemEnum = typeof GetCatalogItemFieldsCatalogItemEnum[keyof typeof GetCatalogItemFieldsCatalogItemEnum];
/**
 * @export
 */
export const GetCatalogItemFieldsCatalogVariantEnum = {
    ExternalId: 'external_id',
    Title: 'title',
    Description: 'description',
    Sku: 'sku',
    InventoryPolicy: 'inventory_policy',
    InventoryQuantity: 'inventory_quantity',
    Price: 'price',
    Url: 'url',
    ImageFullUrl: 'image_full_url',
    ImageThumbnailUrl: 'image_thumbnail_url',
    Images: 'images',
    CustomMetadata: 'custom_metadata',
    Published: 'published',
    Created: 'created',
    Updated: 'updated'
} as const;
export type GetCatalogItemFieldsCatalogVariantEnum = typeof GetCatalogItemFieldsCatalogVariantEnum[keyof typeof GetCatalogItemFieldsCatalogVariantEnum];
/**
 * @export
 */
export const GetCatalogItemIncludeEnum = {
    Variants: 'variants'
} as const;
export type GetCatalogItemIncludeEnum = typeof GetCatalogItemIncludeEnum[keyof typeof GetCatalogItemIncludeEnum];
/**
 * @export
 */
export const GetCatalogItemCategoriesFieldsCatalogCategoryEnum = {
    ExternalId: 'external_id',
    Name: 'name',
    Updated: 'updated'
} as const;
export type GetCatalogItemCategoriesFieldsCatalogCategoryEnum = typeof GetCatalogItemCategoriesFieldsCatalogCategoryEnum[keyof typeof GetCatalogItemCategoriesFieldsCatalogCategoryEnum];
/**
 * @export
 */
export const GetCatalogItemCategoriesSortEnum = {
    Created: 'created',
    Created: '-created'
} as const;
export type GetCatalogItemCategoriesSortEnum = typeof GetCatalogItemCategoriesSortEnum[keyof typeof GetCatalogItemCategoriesSortEnum];
/**
 * @export
 */
export const GetCatalogItemRelationshipsRelatedResourceEnum = {
    Categories: 'categories'
} as const;
export type GetCatalogItemRelationshipsRelatedResourceEnum = typeof GetCatalogItemRelationshipsRelatedResourceEnum[keyof typeof GetCatalogItemRelationshipsRelatedResourceEnum];
/**
 * @export
 */
export const GetCatalogItemVariantsFieldsCatalogVariantEnum = {
    ExternalId: 'external_id',
    Title: 'title',
    Description: 'description',
    Sku: 'sku',
    InventoryPolicy: 'inventory_policy',
    InventoryQuantity: 'inventory_quantity',
    Price: 'price',
    Url: 'url',
    ImageFullUrl: 'image_full_url',
    ImageThumbnailUrl: 'image_thumbnail_url',
    Images: 'images',
    CustomMetadata: 'custom_metadata',
    Published: 'published',
    Created: 'created',
    Updated: 'updated'
} as const;
export type GetCatalogItemVariantsFieldsCatalogVariantEnum = typeof GetCatalogItemVariantsFieldsCatalogVariantEnum[keyof typeof GetCatalogItemVariantsFieldsCatalogVariantEnum];
/**
 * @export
 */
export const GetCatalogItemVariantsSortEnum = {
    Created: 'created',
    Created: '-created'
} as const;
export type GetCatalogItemVariantsSortEnum = typeof GetCatalogItemVariantsSortEnum[keyof typeof GetCatalogItemVariantsSortEnum];
/**
 * @export
 */
export const GetCatalogItemsFieldsCatalogItemEnum = {
    ExternalId: 'external_id',
    Title: 'title',
    Description: 'description',
    Url: 'url',
    ImageFullUrl: 'image_full_url',
    ImageThumbnailUrl: 'image_thumbnail_url',
    Images: 'images',
    CustomMetadata: 'custom_metadata',
    Published: 'published',
    Created: 'created',
    Updated: 'updated'
} as const;
export type GetCatalogItemsFieldsCatalogItemEnum = typeof GetCatalogItemsFieldsCatalogItemEnum[keyof typeof GetCatalogItemsFieldsCatalogItemEnum];
/**
 * @export
 */
export const GetCatalogItemsFieldsCatalogVariantEnum = {
    ExternalId: 'external_id',
    Title: 'title',
    Description: 'description',
    Sku: 'sku',
    InventoryPolicy: 'inventory_policy',
    InventoryQuantity: 'inventory_quantity',
    Price: 'price',
    Url: 'url',
    ImageFullUrl: 'image_full_url',
    ImageThumbnailUrl: 'image_thumbnail_url',
    Images: 'images',
    CustomMetadata: 'custom_metadata',
    Published: 'published',
    Created: 'created',
    Updated: 'updated'
} as const;
export type GetCatalogItemsFieldsCatalogVariantEnum = typeof GetCatalogItemsFieldsCatalogVariantEnum[keyof typeof GetCatalogItemsFieldsCatalogVariantEnum];
/**
 * @export
 */
export const GetCatalogItemsIncludeEnum = {
    Variants: 'variants'
} as const;
export type GetCatalogItemsIncludeEnum = typeof GetCatalogItemsIncludeEnum[keyof typeof GetCatalogItemsIncludeEnum];
/**
 * @export
 */
export const GetCatalogItemsSortEnum = {
    Created: 'created',
    Created: '-created'
} as const;
export type GetCatalogItemsSortEnum = typeof GetCatalogItemsSortEnum[keyof typeof GetCatalogItemsSortEnum];
/**
 * @export
 */
export const GetCatalogVariantFieldsCatalogVariantEnum = {
    ExternalId: 'external_id',
    Title: 'title',
    Description: 'description',
    Sku: 'sku',
    InventoryPolicy: 'inventory_policy',
    InventoryQuantity: 'inventory_quantity',
    Price: 'price',
    Url: 'url',
    ImageFullUrl: 'image_full_url',
    ImageThumbnailUrl: 'image_thumbnail_url',
    Images: 'images',
    CustomMetadata: 'custom_metadata',
    Published: 'published',
    Created: 'created',
    Updated: 'updated'
} as const;
export type GetCatalogVariantFieldsCatalogVariantEnum = typeof GetCatalogVariantFieldsCatalogVariantEnum[keyof typeof GetCatalogVariantFieldsCatalogVariantEnum];
/**
 * @export
 */
export const GetCatalogVariantsFieldsCatalogVariantEnum = {
    ExternalId: 'external_id',
    Title: 'title',
    Description: 'description',
    Sku: 'sku',
    InventoryPolicy: 'inventory_policy',
    InventoryQuantity: 'inventory_quantity',
    Price: 'price',
    Url: 'url',
    ImageFullUrl: 'image_full_url',
    ImageThumbnailUrl: 'image_thumbnail_url',
    Images: 'images',
    CustomMetadata: 'custom_metadata',
    Published: 'published',
    Created: 'created',
    Updated: 'updated'
} as const;
export type GetCatalogVariantsFieldsCatalogVariantEnum = typeof GetCatalogVariantsFieldsCatalogVariantEnum[keyof typeof GetCatalogVariantsFieldsCatalogVariantEnum];
/**
 * @export
 */
export const GetCatalogVariantsSortEnum = {
    Created: 'created',
    Created: '-created'
} as const;
export type GetCatalogVariantsSortEnum = typeof GetCatalogVariantsSortEnum[keyof typeof GetCatalogVariantsSortEnum];
/**
 * @export
 */
export const GetCreateCategoriesJobFieldsCatalogCategoryBulkCreateJobEnum = {
    JobId: 'job_id',
    Status: 'status',
    CreatedAt: 'created_at',
    TotalCount: 'total_count',
    CompletedCount: 'completed_count',
    FailedCount: 'failed_count',
    CompletedAt: 'completed_at',
    ExpiresAt: 'expires_at',
    Errors: 'errors'
} as const;
export type GetCreateCategoriesJobFieldsCatalogCategoryBulkCreateJobEnum = typeof GetCreateCategoriesJobFieldsCatalogCategoryBulkCreateJobEnum[keyof typeof GetCreateCategoriesJobFieldsCatalogCategoryBulkCreateJobEnum];
/**
 * @export
 */
export const GetCreateCategoriesJobFieldsCatalogCategoryEnum = {
    ExternalId: 'external_id',
    Name: 'name',
    Updated: 'updated'
} as const;
export type GetCreateCategoriesJobFieldsCatalogCategoryEnum = typeof GetCreateCategoriesJobFieldsCatalogCategoryEnum[keyof typeof GetCreateCategoriesJobFieldsCatalogCategoryEnum];
/**
 * @export
 */
export const GetCreateCategoriesJobIncludeEnum = {
    Categories: 'categories'
} as const;
export type GetCreateCategoriesJobIncludeEnum = typeof GetCreateCategoriesJobIncludeEnum[keyof typeof GetCreateCategoriesJobIncludeEnum];
/**
 * @export
 */
export const GetCreateCategoriesJobsFieldsCatalogCategoryBulkCreateJobEnum = {
    JobId: 'job_id',
    Status: 'status',
    CreatedAt: 'created_at',
    TotalCount: 'total_count',
    CompletedCount: 'completed_count',
    FailedCount: 'failed_count',
    CompletedAt: 'completed_at',
    ExpiresAt: 'expires_at',
    Errors: 'errors'
} as const;
export type GetCreateCategoriesJobsFieldsCatalogCategoryBulkCreateJobEnum = typeof GetCreateCategoriesJobsFieldsCatalogCategoryBulkCreateJobEnum[keyof typeof GetCreateCategoriesJobsFieldsCatalogCategoryBulkCreateJobEnum];
/**
 * @export
 */
export const GetCreateItemsJobFieldsCatalogItemBulkCreateJobEnum = {
    JobId: 'job_id',
    Status: 'status',
    CreatedAt: 'created_at',
    TotalCount: 'total_count',
    CompletedCount: 'completed_count',
    FailedCount: 'failed_count',
    CompletedAt: 'completed_at',
    ExpiresAt: 'expires_at',
    Errors: 'errors'
} as const;
export type GetCreateItemsJobFieldsCatalogItemBulkCreateJobEnum = typeof GetCreateItemsJobFieldsCatalogItemBulkCreateJobEnum[keyof typeof GetCreateItemsJobFieldsCatalogItemBulkCreateJobEnum];
/**
 * @export
 */
export const GetCreateItemsJobFieldsCatalogItemEnum = {
    ExternalId: 'external_id',
    Title: 'title',
    Description: 'description',
    Url: 'url',
    ImageFullUrl: 'image_full_url',
    ImageThumbnailUrl: 'image_thumbnail_url',
    Images: 'images',
    CustomMetadata: 'custom_metadata',
    Published: 'published',
    Created: 'created',
    Updated: 'updated'
} as const;
export type GetCreateItemsJobFieldsCatalogItemEnum = typeof GetCreateItemsJobFieldsCatalogItemEnum[keyof typeof GetCreateItemsJobFieldsCatalogItemEnum];
/**
 * @export
 */
export const GetCreateItemsJobIncludeEnum = {
    Items: 'items'
} as const;
export type GetCreateItemsJobIncludeEnum = typeof GetCreateItemsJobIncludeEnum[keyof typeof GetCreateItemsJobIncludeEnum];
/**
 * @export
 */
export const GetCreateItemsJobsFieldsCatalogItemBulkCreateJobEnum = {
    JobId: 'job_id',
    Status: 'status',
    CreatedAt: 'created_at',
    TotalCount: 'total_count',
    CompletedCount: 'completed_count',
    FailedCount: 'failed_count',
    CompletedAt: 'completed_at',
    ExpiresAt: 'expires_at',
    Errors: 'errors'
} as const;
export type GetCreateItemsJobsFieldsCatalogItemBulkCreateJobEnum = typeof GetCreateItemsJobsFieldsCatalogItemBulkCreateJobEnum[keyof typeof GetCreateItemsJobsFieldsCatalogItemBulkCreateJobEnum];
/**
 * @export
 */
export const GetCreateVariantsJobFieldsCatalogVariantBulkCreateJobEnum = {
    JobId: 'job_id',
    Status: 'status',
    CreatedAt: 'created_at',
    TotalCount: 'total_count',
    CompletedCount: 'completed_count',
    FailedCount: 'failed_count',
    CompletedAt: 'completed_at',
    ExpiresAt: 'expires_at',
    Errors: 'errors'
} as const;
export type GetCreateVariantsJobFieldsCatalogVariantBulkCreateJobEnum = typeof GetCreateVariantsJobFieldsCatalogVariantBulkCreateJobEnum[keyof typeof GetCreateVariantsJobFieldsCatalogVariantBulkCreateJobEnum];
/**
 * @export
 */
export const GetCreateVariantsJobFieldsCatalogVariantEnum = {
    ExternalId: 'external_id',
    Title: 'title',
    Description: 'description',
    Sku: 'sku',
    InventoryPolicy: 'inventory_policy',
    InventoryQuantity: 'inventory_quantity',
    Price: 'price',
    Url: 'url',
    ImageFullUrl: 'image_full_url',
    ImageThumbnailUrl: 'image_thumbnail_url',
    Images: 'images',
    CustomMetadata: 'custom_metadata',
    Published: 'published',
    Created: 'created',
    Updated: 'updated'
} as const;
export type GetCreateVariantsJobFieldsCatalogVariantEnum = typeof GetCreateVariantsJobFieldsCatalogVariantEnum[keyof typeof GetCreateVariantsJobFieldsCatalogVariantEnum];
/**
 * @export
 */
export const GetCreateVariantsJobIncludeEnum = {
    Variants: 'variants'
} as const;
export type GetCreateVariantsJobIncludeEnum = typeof GetCreateVariantsJobIncludeEnum[keyof typeof GetCreateVariantsJobIncludeEnum];
/**
 * @export
 */
export const GetCreateVariantsJobsFieldsCatalogVariantBulkCreateJobEnum = {
    JobId: 'job_id',
    Status: 'status',
    CreatedAt: 'created_at',
    TotalCount: 'total_count',
    CompletedCount: 'completed_count',
    FailedCount: 'failed_count',
    CompletedAt: 'completed_at',
    ExpiresAt: 'expires_at',
    Errors: 'errors'
} as const;
export type GetCreateVariantsJobsFieldsCatalogVariantBulkCreateJobEnum = typeof GetCreateVariantsJobsFieldsCatalogVariantBulkCreateJobEnum[keyof typeof GetCreateVariantsJobsFieldsCatalogVariantBulkCreateJobEnum];
/**
 * @export
 */
export const GetDeleteCategoriesJobFieldsCatalogCategoryBulkDeleteJobEnum = {
    JobId: 'job_id',
    Status: 'status',
    CreatedAt: 'created_at',
    TotalCount: 'total_count',
    CompletedCount: 'completed_count',
    FailedCount: 'failed_count',
    CompletedAt: 'completed_at',
    ExpiresAt: 'expires_at',
    Errors: 'errors'
} as const;
export type GetDeleteCategoriesJobFieldsCatalogCategoryBulkDeleteJobEnum = typeof GetDeleteCategoriesJobFieldsCatalogCategoryBulkDeleteJobEnum[keyof typeof GetDeleteCategoriesJobFieldsCatalogCategoryBulkDeleteJobEnum];
/**
 * @export
 */
export const GetDeleteCategoriesJobsFieldsCatalogCategoryBulkDeleteJobEnum = {
    JobId: 'job_id',
    Status: 'status',
    CreatedAt: 'created_at',
    TotalCount: 'total_count',
    CompletedCount: 'completed_count',
    FailedCount: 'failed_count',
    CompletedAt: 'completed_at',
    ExpiresAt: 'expires_at',
    Errors: 'errors'
} as const;
export type GetDeleteCategoriesJobsFieldsCatalogCategoryBulkDeleteJobEnum = typeof GetDeleteCategoriesJobsFieldsCatalogCategoryBulkDeleteJobEnum[keyof typeof GetDeleteCategoriesJobsFieldsCatalogCategoryBulkDeleteJobEnum];
/**
 * @export
 */
export const GetDeleteItemsJobFieldsCatalogItemBulkDeleteJobEnum = {
    JobId: 'job_id',
    Status: 'status',
    CreatedAt: 'created_at',
    TotalCount: 'total_count',
    CompletedCount: 'completed_count',
    FailedCount: 'failed_count',
    CompletedAt: 'completed_at',
    ExpiresAt: 'expires_at',
    Errors: 'errors'
} as const;
export type GetDeleteItemsJobFieldsCatalogItemBulkDeleteJobEnum = typeof GetDeleteItemsJobFieldsCatalogItemBulkDeleteJobEnum[keyof typeof GetDeleteItemsJobFieldsCatalogItemBulkDeleteJobEnum];
/**
 * @export
 */
export const GetDeleteItemsJobsFieldsCatalogItemBulkDeleteJobEnum = {
    JobId: 'job_id',
    Status: 'status',
    CreatedAt: 'created_at',
    TotalCount: 'total_count',
    CompletedCount: 'completed_count',
    FailedCount: 'failed_count',
    CompletedAt: 'completed_at',
    ExpiresAt: 'expires_at',
    Errors: 'errors'
} as const;
export type GetDeleteItemsJobsFieldsCatalogItemBulkDeleteJobEnum = typeof GetDeleteItemsJobsFieldsCatalogItemBulkDeleteJobEnum[keyof typeof GetDeleteItemsJobsFieldsCatalogItemBulkDeleteJobEnum];
/**
 * @export
 */
export const GetDeleteVariantsJobFieldsCatalogVariantBulkDeleteJobEnum = {
    JobId: 'job_id',
    Status: 'status',
    CreatedAt: 'created_at',
    TotalCount: 'total_count',
    CompletedCount: 'completed_count',
    FailedCount: 'failed_count',
    CompletedAt: 'completed_at',
    ExpiresAt: 'expires_at',
    Errors: 'errors'
} as const;
export type GetDeleteVariantsJobFieldsCatalogVariantBulkDeleteJobEnum = typeof GetDeleteVariantsJobFieldsCatalogVariantBulkDeleteJobEnum[keyof typeof GetDeleteVariantsJobFieldsCatalogVariantBulkDeleteJobEnum];
/**
 * @export
 */
export const GetDeleteVariantsJobsFieldsCatalogVariantBulkDeleteJobEnum = {
    JobId: 'job_id',
    Status: 'status',
    CreatedAt: 'created_at',
    TotalCount: 'total_count',
    CompletedCount: 'completed_count',
    FailedCount: 'failed_count',
    CompletedAt: 'completed_at',
    ExpiresAt: 'expires_at',
    Errors: 'errors'
} as const;
export type GetDeleteVariantsJobsFieldsCatalogVariantBulkDeleteJobEnum = typeof GetDeleteVariantsJobsFieldsCatalogVariantBulkDeleteJobEnum[keyof typeof GetDeleteVariantsJobsFieldsCatalogVariantBulkDeleteJobEnum];
/**
 * @export
 */
export const GetUpdateCategoriesJobFieldsCatalogCategoryBulkUpdateJobEnum = {
    JobId: 'job_id',
    Status: 'status',
    CreatedAt: 'created_at',
    TotalCount: 'total_count',
    CompletedCount: 'completed_count',
    FailedCount: 'failed_count',
    CompletedAt: 'completed_at',
    ExpiresAt: 'expires_at',
    Errors: 'errors'
} as const;
export type GetUpdateCategoriesJobFieldsCatalogCategoryBulkUpdateJobEnum = typeof GetUpdateCategoriesJobFieldsCatalogCategoryBulkUpdateJobEnum[keyof typeof GetUpdateCategoriesJobFieldsCatalogCategoryBulkUpdateJobEnum];
/**
 * @export
 */
export const GetUpdateCategoriesJobFieldsCatalogCategoryEnum = {
    ExternalId: 'external_id',
    Name: 'name',
    Updated: 'updated'
} as const;
export type GetUpdateCategoriesJobFieldsCatalogCategoryEnum = typeof GetUpdateCategoriesJobFieldsCatalogCategoryEnum[keyof typeof GetUpdateCategoriesJobFieldsCatalogCategoryEnum];
/**
 * @export
 */
export const GetUpdateCategoriesJobIncludeEnum = {
    Categories: 'categories'
} as const;
export type GetUpdateCategoriesJobIncludeEnum = typeof GetUpdateCategoriesJobIncludeEnum[keyof typeof GetUpdateCategoriesJobIncludeEnum];
/**
 * @export
 */
export const GetUpdateCategoriesJobsFieldsCatalogCategoryBulkUpdateJobEnum = {
    JobId: 'job_id',
    Status: 'status',
    CreatedAt: 'created_at',
    TotalCount: 'total_count',
    CompletedCount: 'completed_count',
    FailedCount: 'failed_count',
    CompletedAt: 'completed_at',
    ExpiresAt: 'expires_at',
    Errors: 'errors'
} as const;
export type GetUpdateCategoriesJobsFieldsCatalogCategoryBulkUpdateJobEnum = typeof GetUpdateCategoriesJobsFieldsCatalogCategoryBulkUpdateJobEnum[keyof typeof GetUpdateCategoriesJobsFieldsCatalogCategoryBulkUpdateJobEnum];
/**
 * @export
 */
export const GetUpdateItemsJobFieldsCatalogItemBulkUpdateJobEnum = {
    JobId: 'job_id',
    Status: 'status',
    CreatedAt: 'created_at',
    TotalCount: 'total_count',
    CompletedCount: 'completed_count',
    FailedCount: 'failed_count',
    CompletedAt: 'completed_at',
    ExpiresAt: 'expires_at',
    Errors: 'errors'
} as const;
export type GetUpdateItemsJobFieldsCatalogItemBulkUpdateJobEnum = typeof GetUpdateItemsJobFieldsCatalogItemBulkUpdateJobEnum[keyof typeof GetUpdateItemsJobFieldsCatalogItemBulkUpdateJobEnum];
/**
 * @export
 */
export const GetUpdateItemsJobFieldsCatalogItemEnum = {
    ExternalId: 'external_id',
    Title: 'title',
    Description: 'description',
    Url: 'url',
    ImageFullUrl: 'image_full_url',
    ImageThumbnailUrl: 'image_thumbnail_url',
    Images: 'images',
    CustomMetadata: 'custom_metadata',
    Published: 'published',
    Created: 'created',
    Updated: 'updated'
} as const;
export type GetUpdateItemsJobFieldsCatalogItemEnum = typeof GetUpdateItemsJobFieldsCatalogItemEnum[keyof typeof GetUpdateItemsJobFieldsCatalogItemEnum];
/**
 * @export
 */
export const GetUpdateItemsJobIncludeEnum = {
    Items: 'items'
} as const;
export type GetUpdateItemsJobIncludeEnum = typeof GetUpdateItemsJobIncludeEnum[keyof typeof GetUpdateItemsJobIncludeEnum];
/**
 * @export
 */
export const GetUpdateItemsJobsFieldsCatalogItemBulkUpdateJobEnum = {
    JobId: 'job_id',
    Status: 'status',
    CreatedAt: 'created_at',
    TotalCount: 'total_count',
    CompletedCount: 'completed_count',
    FailedCount: 'failed_count',
    CompletedAt: 'completed_at',
    ExpiresAt: 'expires_at',
    Errors: 'errors'
} as const;
export type GetUpdateItemsJobsFieldsCatalogItemBulkUpdateJobEnum = typeof GetUpdateItemsJobsFieldsCatalogItemBulkUpdateJobEnum[keyof typeof GetUpdateItemsJobsFieldsCatalogItemBulkUpdateJobEnum];
/**
 * @export
 */
export const GetUpdateVariantsJobFieldsCatalogVariantBulkUpdateJobEnum = {
    JobId: 'job_id',
    Status: 'status',
    CreatedAt: 'created_at',
    TotalCount: 'total_count',
    CompletedCount: 'completed_count',
    FailedCount: 'failed_count',
    CompletedAt: 'completed_at',
    ExpiresAt: 'expires_at',
    Errors: 'errors'
} as const;
export type GetUpdateVariantsJobFieldsCatalogVariantBulkUpdateJobEnum = typeof GetUpdateVariantsJobFieldsCatalogVariantBulkUpdateJobEnum[keyof typeof GetUpdateVariantsJobFieldsCatalogVariantBulkUpdateJobEnum];
/**
 * @export
 */
export const GetUpdateVariantsJobFieldsCatalogVariantEnum = {
    ExternalId: 'external_id',
    Title: 'title',
    Description: 'description',
    Sku: 'sku',
    InventoryPolicy: 'inventory_policy',
    InventoryQuantity: 'inventory_quantity',
    Price: 'price',
    Url: 'url',
    ImageFullUrl: 'image_full_url',
    ImageThumbnailUrl: 'image_thumbnail_url',
    Images: 'images',
    CustomMetadata: 'custom_metadata',
    Published: 'published',
    Created: 'created',
    Updated: 'updated'
} as const;
export type GetUpdateVariantsJobFieldsCatalogVariantEnum = typeof GetUpdateVariantsJobFieldsCatalogVariantEnum[keyof typeof GetUpdateVariantsJobFieldsCatalogVariantEnum];
/**
 * @export
 */
export const GetUpdateVariantsJobIncludeEnum = {
    Variants: 'variants'
} as const;
export type GetUpdateVariantsJobIncludeEnum = typeof GetUpdateVariantsJobIncludeEnum[keyof typeof GetUpdateVariantsJobIncludeEnum];
/**
 * @export
 */
export const GetUpdateVariantsJobsFieldsCatalogVariantBulkUpdateJobEnum = {
    JobId: 'job_id',
    Status: 'status',
    CreatedAt: 'created_at',
    TotalCount: 'total_count',
    CompletedCount: 'completed_count',
    FailedCount: 'failed_count',
    CompletedAt: 'completed_at',
    ExpiresAt: 'expires_at',
    Errors: 'errors'
} as const;
export type GetUpdateVariantsJobsFieldsCatalogVariantBulkUpdateJobEnum = typeof GetUpdateVariantsJobsFieldsCatalogVariantBulkUpdateJobEnum[keyof typeof GetUpdateVariantsJobsFieldsCatalogVariantBulkUpdateJobEnum];
/**
 * @export
 */
export const UpdateCatalogCategoryRelationshipsRelatedResourceEnum = {
    Items: 'items'
} as const;
export type UpdateCatalogCategoryRelationshipsRelatedResourceEnum = typeof UpdateCatalogCategoryRelationshipsRelatedResourceEnum[keyof typeof UpdateCatalogCategoryRelationshipsRelatedResourceEnum];
/**
 * @export
 */
export const UpdateCatalogItemRelationshipsRelatedResourceEnum = {
    Categories: 'categories'
} as const;
export type UpdateCatalogItemRelationshipsRelatedResourceEnum = typeof UpdateCatalogItemRelationshipsRelatedResourceEnum[keyof typeof UpdateCatalogItemRelationshipsRelatedResourceEnum];
